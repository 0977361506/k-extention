{"version":3,"file":"background.js","mappings":"AAsHA,SAASA,IACFC,SAASC,eAAe,cAG3BC,QAAQC,IAAI,wCAFZD,QAAQC,IAAI,6DAIhB,CAwBA,IAAIC,EAnJJF,QAAQC,IAAI,gDAGZE,OAAOC,QAAQC,YAAYC,YAAaC,IACtCP,QAAQC,IAAI,iCAAkCM,EAAQC,QAE/B,YAAnBD,EAAQC,QAEVL,OAAOM,QAAQC,KAAKC,IAAI,CACtBC,kBAAmB,CACjBC,OAAQ,GACRC,YAAa,GACbC,aAAc,GACdC,YAAa,GACbC,YAAa,GACbC,eAAgB,GAChBC,WAAW,EACXC,cAAe,iBAOvBjB,OAAOC,QAAQiB,UAAUf,YAAY,CAACgB,EAASC,EAAQC,KAGrD,OAFAxB,QAAQC,IAAI,kCAAmCqB,GAEvCA,EAAQG,QACd,IAAK,cAEH,OAiBNC,eAAiCF,GAC/B,IAEEA,EAAa,CACXG,SAAS,EACTC,gBAHmBzB,OAAOM,QAAQC,KAAKmB,IAAI,CAAC,uBAG3BjB,mBAAqB,CAAC,GAE3C,CAAE,MAAOkB,GACP9B,QAAQ8B,MAAM,4BAA6BA,GAC3CN,EAAa,CACXG,SAAS,EACTG,MAAOA,EAAMC,SAEjB,CACF,CAhCMC,CAAkBR,IACX,EAET,IAAK,eAEH,OA8BNE,eAAkCE,EAAUJ,GAC1C,UACQrB,OAAOM,QAAQC,KAAKC,IAAI,CAAEC,kBAAmBgB,IACnDJ,EAAa,CAAEG,SAAS,GAC1B,CAAE,MAAOG,GACP9B,QAAQ8B,MAAM,2BAA4BA,GAC1CN,EAAa,CACXG,SAAS,EACTG,MAAOA,EAAMC,SAEjB,CACF,CA1CME,CAAmBX,EAAQM,SAAUJ,IAC9B,EAET,IAAK,mBAEH,OAwCNE,eAAsCF,GACpC,IAEEA,EAAa,CACXG,SAAS,EACTO,kBAHwB/B,OAAO+B,YAAYC,UAK/C,CAAE,MAAOL,GACP9B,QAAQ8B,MAAM,gCAAiCA,GAC/CN,EAAa,CACXG,SAAS,EACTG,MAAOA,EAAMC,SAEjB,CACF,CAvDMK,CAAuBZ,IAChB,EAET,QACExB,QAAQqC,KAAK,oBAAqBf,EAAQG,QAC1CD,EAAa,CAAEG,SAAS,EAAOG,MAAO,sBAqD5C3B,OAAOmC,KAAKC,UAAUjC,YAAY,CAACkC,EAAOC,EAAYC,KAC1B,aAAtBD,EAAWE,QAAyBD,EAAIE,MAEjBF,EAAIE,IAAIC,SAAS,eAClBH,EAAIE,IAAIC,SAAS,cACjBH,EAAIE,IAAIC,SAAS,qBAGvC7C,QAAQC,IAAI,+BAAgCyC,EAAIE,KAGhDzC,OAAO2C,UAAUC,cAAc,CAC7BC,OAAQ,CAAER,MAAOA,GACjBS,KAAMpD,IACLqD,MAAMpB,IACP9B,QAAQC,IAAI,4CAA6C6B,EAAMC,cAgBvE5B,OAAOM,QAAQ0C,UAAU7C,YAAY,CAAC8C,EAASC,KAC3B,SAAdA,GAAwBD,EAAQxC,oBAClCZ,QAAQC,IAAI,uBAAwBmD,EAAQxC,mBAG5CT,OAAOmC,KAAKgB,MAAM,CAAC,EAAIhB,IACrBA,EAAKiB,QAAQb,IACPA,EAAIE,MAAQF,EAAIE,IAAIC,SAAS,eAAiBH,EAAIE,IAAIC,SAAS,cAAgBH,EAAIE,IAAIC,SAAS,oBAClG1C,OAAOmC,KAAKkB,YAAYd,EAAIe,GAAI,CAC9BhC,OAAQ,kBACRG,SAAUwB,EAAQxC,kBAAkB8C,WACnCR,MAAMpB,cAajB5B,EAAoByD,YAAY,KAC9BxD,OAAOC,QAAQwD,gBAAgB,SAG9B,KAcLzD,OAAOC,QAAQyD,UAAUvD,YAAY,KACnCN,QAAQC,IAAI,mCAXRC,IACF4D,cAAc5D,GACdA,EAAoB,QAaxBF,QAAQC,IAAI","sources":["webpack://k-tool-extension-clean/./src/background/background.js"],"sourcesContent":["// K-Tool Extension Background Script\nconsole.log('🚀 K-Tool Extension Background Script loaded');\n\n// Handle extension installation\nchrome.runtime.onInstalled.addListener((details) => {\n  console.log('📦 K-Tool Extension installed:', details.reason);\n  \n  if (details.reason === 'install') {\n    // Set default settings on first install\n    chrome.storage.sync.set({\n      extensionSettings: {\n        apiKey: '',\n        urlTemplate: '',\n        customPrompt: '',\n        documentUrl: '',\n        databaseUrl: '',\n        instructionUrl: '',\n        isEnabled: true,\n        selectedModel: 'sonar-pro'\n      }\n    });\n  }\n});\n\n// Handle messages from content scripts\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  console.log('📨 Background received message:', request);\n  \n  switch (request.action) {\n    case 'getSettings':\n      handleGetSettings(sendResponse);\n      return true; // Keep message channel open for async response\n      \n    case 'saveSettings':\n      handleSaveSettings(request.settings, sendResponse);\n      return true;\n      \n    case 'checkPermissions':\n      handleCheckPermissions(sendResponse);\n      return true;\n      \n    default:\n      console.warn('❓ Unknown action:', request.action);\n      sendResponse({ success: false, error: 'Unknown action' });\n  }\n});\n\n// Get settings from storage\nasync function handleGetSettings(sendResponse) {\n  try {\n    const result = await chrome.storage.sync.get(['extensionSettings']);\n    sendResponse({ \n      success: true, \n      settings: result.extensionSettings || {} \n    });\n  } catch (error) {\n    console.error('❌ Error getting settings:', error);\n    sendResponse({ \n      success: false, \n      error: error.message \n    });\n  }\n}\n\n// Save settings to storage\nasync function handleSaveSettings(settings, sendResponse) {\n  try {\n    await chrome.storage.sync.set({ extensionSettings: settings });\n    sendResponse({ success: true });\n  } catch (error) {\n    console.error('❌ Error saving settings:', error);\n    sendResponse({ \n      success: false, \n      error: error.message \n    });\n  }\n}\n\n// Check if extension has required permissions\nasync function handleCheckPermissions(sendResponse) {\n  try {\n    const permissions = await chrome.permissions.getAll();\n    sendResponse({ \n      success: true, \n      permissions: permissions \n    });\n  } catch (error) {\n    console.error('❌ Error checking permissions:', error);\n    sendResponse({ \n      success: false, \n      error: error.message \n    });\n  }\n}\n\n// Handle tab updates to inject content script if needed\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete' && tab.url) {\n    // Check if this is a Confluence page\n    const isConfluencePage = tab.url.includes('confluence') || \n                            tab.url.includes('atlassian') ||\n                            tab.url.includes('localhost:8090');\n    \n    if (isConfluencePage) {\n      console.log('🔍 Confluence page detected:', tab.url);\n      \n      // Inject content script if not already injected\n      chrome.scripting.executeScript({\n        target: { tabId: tabId },\n        func: checkKToolInjection\n      }).catch(error => {\n        console.log('Content script already injected or error:', error.message);\n      });\n    }\n  }\n});\n\n// Function to check if K-Tool is already injected\nfunction checkKToolInjection() {\n  if (!document.getElementById('ktool-root')) {\n    console.log('🚀 K-Tool not detected, will be injected by content script');\n  } else {\n    console.log('✅ K-Tool already active on this page');\n  }\n}\n\n// Handle storage changes\nchrome.storage.onChanged.addListener((changes, namespace) => {\n  if (namespace === 'sync' && changes.extensionSettings) {\n    console.log('⚙️ Settings changed:', changes.extensionSettings);\n    \n    // Notify all content scripts about settings change\n    chrome.tabs.query({}, (tabs) => {\n      tabs.forEach(tab => {\n        if (tab.url && (tab.url.includes('confluence') || tab.url.includes('atlassian') || tab.url.includes('localhost:8090'))) {\n          chrome.tabs.sendMessage(tab.id, {\n            action: 'settingsChanged',\n            settings: changes.extensionSettings.newValue\n          }).catch(error => {\n            // Ignore errors for tabs without content script\n          });\n        }\n      });\n    });\n  }\n});\n\n// Keep service worker alive\nlet keepAliveInterval;\n\nfunction keepAlive() {\n  keepAliveInterval = setInterval(() => {\n    chrome.runtime.getPlatformInfo(() => {\n      // This is just to keep the service worker active\n    });\n  }, 20000); // Every 20 seconds\n}\n\nfunction stopKeepAlive() {\n  if (keepAliveInterval) {\n    clearInterval(keepAliveInterval);\n    keepAliveInterval = null;\n  }\n}\n\n// Start keep alive when extension starts\nkeepAlive();\n\n// Clean up on suspend\nchrome.runtime.onSuspend.addListener(() => {\n  console.log('💤 Background script suspending');\n  stopKeepAlive();\n});\n\nconsole.log('✅ K-Tool Extension Background Script ready');\n"],"names":["checkKToolInjection","document","getElementById","console","log","keepAliveInterval","chrome","runtime","onInstalled","addListener","details","reason","storage","sync","set","extensionSettings","apiKey","urlTemplate","customPrompt","documentUrl","databaseUrl","instructionUrl","isEnabled","selectedModel","onMessage","request","sender","sendResponse","action","async","success","settings","get","error","message","handleGetSettings","handleSaveSettings","permissions","getAll","handleCheckPermissions","warn","tabs","onUpdated","tabId","changeInfo","tab","status","url","includes","scripting","executeScript","target","func","catch","onChanged","changes","namespace","query","forEach","sendMessage","id","newValue","setInterval","getPlatformInfo","onSuspend","clearInterval"],"sourceRoot":""}