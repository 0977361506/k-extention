{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://k-tool-extension-clean/./src/shared/constants.js","webpack://k-tool-extension-clean/./src/shared/storage.js","webpack://k-tool-extension-clean/./src/popup/popup.js"],"sourcesContent":["// K-Tool Extension Constants\nexport const EXTENSION_SETTINGS_KEY = \"extensionSettings\";\n\n// API URLs\nconst isLocal =\n  window.location.hostname === \"localhost\" ||\n  window.location.hostname === \"127.0.0.1\" ||\n  window.location.hostname.includes(\"localhost\");\nconst rootUrl = isLocal\n  ? \"http://localhost:5001\"\n  : \"https://gendoc.thangnotes.dev\";\n\n// Confluence API URLs (always localhost:8090 for Confluence)\nconst confluenceBaseUrl = \"http://localhost:8090\";\n\nexport const API_URLS = {\n  GEN_DOC: `${rootUrl}/api/generate-full-confluence-doc`,\n  GEN_DOC_STATUS: `${rootUrl}/api/generate-status`,\n  GEN_DOC_RESULT: `${rootUrl}/api/generate-result`,\n  EDIT_DIAGRAM: `${rootUrl}/api/edit-diagram`,\n  EDIT_MERMAID: `${rootUrl}/api/edit-mermaid`,\n  EDIT_TEXT: `${rootUrl}/api/edit-text`,\n};\n\nexport const CONFLUENCE_API_URLS = {\n  MERMAID_DIAGRAM: `${confluenceBaseUrl}/rest/mermaidrest/1.0/mermaid/diagram`,\n  MERMAID_SAVE: `${confluenceBaseUrl}/rest/mermaidrest/1.0/mermaid/save`,\n  MERMAID_UPDATE: `${confluenceBaseUrl}/rest/mermaidrest/1.0/mermaid`, // /{pageId}\n  MERMAID_EDIT_REFERER: `${confluenceBaseUrl}/plugins/mermaid-cloud/editMermaidDiagram.action`,\n  TINYMCE_PLACEHOLDER: `${confluenceBaseUrl}/rest/tinymce/1/macro/placeholder`,\n};\n\n// Default settings\nexport const DEFAULT_SETTINGS = {\n  apiKey: \"\",\n  urlTemplate: \"\",\n  customPrompt: \"\",\n  documentUrl: \"\",\n  databaseUrl: \"\",\n  instructionUrl: \"\",\n  isEnabled: true,\n  selectedModel: \"sonar-pro\",\n};\n\n// AI Models\nexport const AI_MODELS = {\n  \"sonar-pro\": {\n    name: \"Sonar Pro\",\n    provider: \"Perplexity\",\n    description: \"Perplexity AI Sonar Pro model\",\n  },\n  gemini: {\n    name: \"Gemini 2.0 Flash\",\n    provider: \"Google\",\n    description: \"Google Gemini 2.0 Flash model\",\n  },\n};\n\n// Progress steps for document generation\nexport const PROGRESS_STEPS = [\n  { id: \"fetch\", label: \"Fetch BA Content\", status: \"pending\" },\n  { id: \"clone\", label: \"Clone Template\", status: \"pending\" },\n  { id: \"analyze\", label: \"Analyze Placeholders\", status: \"pending\" },\n  { id: \"generate\", label: \"AI Generate Document\", status: \"pending\" },\n  { id: \"complete\", label: \"Complete\", status: \"pending\" },\n];\n\n// Validation patterns\nexport const VALIDATION = {\n  URL_PATTERN: /^https?:\\/\\/.+/,\n  PLACEHOLDER_PATTERN: /<<([^>]+)>>/g,\n  MIN_PROMPT_LENGTH: 10,\n};\n","// Chrome Storage Management\nimport { DEFAULT_SETTINGS, EXTENSION_SETTINGS_KEY } from \"./constants.js\";\n\nexport class StorageManager {\n  /**\n   * Load settings from Chrome storage\n   * @returns {Promise<Object>} Settings object\n   */\n  static async getSettings() {\n    try {\n      const result = await chrome.storage.sync.get([EXTENSION_SETTINGS_KEY]);\n      return result[EXTENSION_SETTINGS_KEY] || DEFAULT_SETTINGS;\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      return DEFAULT_SETTINGS;\n    }\n  }\n\n  /**\n   * Save settings to Chrome storage\n   * @param {Object} settings - Settings object to save\n   * @returns {Promise<boolean>} Success status\n   */\n  static async saveSettings(settings) {\n    try {\n      await chrome.storage.sync.set({ [EXTENSION_SETTINGS_KEY]: settings });\n      return true;\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Update specific setting field\n   * @param {string} field - Field name to update\n   * @param {any} value - New value\n   * @returns {Promise<boolean>} Success status\n   */\n  static async updateSetting(field, value) {\n    try {\n      const currentSettings = await this.getSettings();\n      const updatedSettings = { ...currentSettings, [field]: value };\n      return await this.saveSettings(updatedSettings);\n    } catch (error) {\n      console.error(\"Error updating setting:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Reset settings to default\n   * @returns {Promise<boolean>} Success status\n   */\n  static async resetSettings() {\n    try {\n      await chrome.storage.sync.remove([EXTENSION_SETTINGS_KEY]);\n      return true;\n    } catch (error) {\n      console.error(\"Error resetting settings:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Validate settings object\n   * @param {Object} settings - Settings to validate\n   * @returns {Object} Validation result with errors\n   */\n  static validateSettings(settings) {\n    const errors = {};\n\n    if (!settings.apiKey?.trim()) {\n      errors.apiKey = \"API Key là bắt buộc\";\n    }\n\n    if (!settings.urlTemplate?.trim()) {\n      errors.urlTemplate = \"URL Template là bắt buộc\";\n    } else {\n      const validationResult = this.validateConfluencePageLink(\n        settings.urlTemplate\n      );\n\n      if (!validationResult.valid) {\n        errors.urlTemplate =\n          validationResult.error || \"URL Template không hợp lệ.\";\n      }\n    }\n    if (!settings.documentUrl?.trim()) {\n      errors.documentUrl = \"URL thư mục lưu tài liệu là bắt buộc\";\n    } else if (!this.isValidUrl(settings.documentUrl)) {\n      errors.documentUrl = \"URL không hợp lệ\";\n    }\n\n    if (!settings.databaseUrl?.trim()) {\n      errors.databaseUrl = \"URL thư mục database là bắt buộc\";\n    } else if (!this.isValidUrl(settings.databaseUrl)) {\n      errors.databaseUrl = \"URL không hợp lệ\";\n    }\n\n    // if (!settings.customPrompt?.trim()) {\n    //   errors.customPrompt = \"Custom Prompt là bắt buộc\";\n    // } else if (settings.customPrompt.trim().length < 10) {\n    //   errors.customPrompt = \"Custom Prompt phải có ít nhất 10 ký tự\";\n    // }\n\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Check if URL is valid\n   * @param {string} url - URL to validate\n   * @returns {boolean} Is valid URL\n   */\n  static isValidUrl(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Validate Confluence page link (có pageId)\n   * @param {string} link - Link Confluence để kiểm tra\n   * @returns {Object} { valid: boolean, error?: string, pageId?: string }\n   */\n  static validateConfluencePageLink(link) {\n    const out = { valid: false, error: null, pageId: null };\n\n    if (!link || typeof link !== \"string\" || !link.trim()) {\n      out.error = \"URL là bắt buộc\";\n      return out;\n    }\n\n    let u;\n    try {\n      u = new URL(link.trim());\n    } catch {\n      out.error = \"URL không hợp lệ\";\n      return out;\n    }\n\n    // check pageId in query param\n    const pageIdParam = u.searchParams.get(\"pageId\");\n    if (pageIdParam && /^\\d+$/.test(pageIdParam)) {\n      out.valid = true;\n      out.pageId = pageIdParam;\n      return out;\n    }\n\n    // check pageId in path (/pages/{id})\n    const pathParts = u.pathname.split(\"/\");\n    const pagesIndex = pathParts.indexOf(\"pages\");\n    if (pagesIndex >= 0 && pathParts.length > pagesIndex + 1) {\n      const candidate = pathParts[pagesIndex + 1];\n      if (/^\\d+$/.test(candidate)) {\n        out.valid = true;\n        out.pageId = candidate;\n        return out;\n      }\n    }\n\n    out.error = \"Không tìm thấy pageId trong URL\";\n    return out;\n  }\n}\n","// K-Tool Extension Popup Script\nimport { StorageManager } from \"../shared/storage.js\";\n\nclass PopupManager {\n  constructor() {\n    this.isInitialLoad = true;\n    this.saveTimeout = null;\n    this.elements = {};\n    this.init();\n  }\n\n  async init() {\n    this.bindElements();\n    this.bindEvents();\n    await this.loadSettings();\n    this.isInitialLoad = false;\n  }\n\n  bindElements() {\n    // Form elements\n    this.elements = {\n      enabledSwitch: document.getElementById(\"enabledSwitch\"),\n      statusText: document.getElementById(\"statusText\"),\n      apiKey: document.getElementById(\"apiKey\"),\n      selectedModel: document.getElementById(\"selectedModel\"),\n      urlTemplate: document.getElementById(\"urlTemplate\"),\n      documentUrl: document.getElementById(\"documentUrl\"),\n      databaseUrl: document.getElementById(\"databaseUrl\"),\n      instructionUrl: document.getElementById(\"instructionUrl\"),\n      customPrompt: document.getElementById(\"customPrompt\"),\n      charCount: document.getElementById(\"charCount\"),\n      saveStatus: document.getElementById(\"saveStatus\"),\n      saveIcon: document.getElementById(\"saveIcon\"),\n      saveText: document.getElementById(\"saveText\"),\n      resetBtn: document.getElementById(\"resetBtn\"),\n    };\n  }\n\n  bindEvents() {\n    // Enable/disable switch\n    this.elements.enabledSwitch.addEventListener(\"change\", (e) => {\n      this.updateStatusText(e.target.checked);\n      this.handleInputChange(\"isEnabled\", e.target.checked);\n    });\n\n    // Form inputs\n    const inputFields = [\n      \"apiKey\",\n      \"selectedModel\",\n      \"urlTemplate\",\n      \"documentUrl\",\n      \"databaseUrl\",\n      \"instructionUrl\",\n      \"customPrompt\",\n    ];\n    inputFields.forEach((field) => {\n      const element = this.elements[field];\n      if (element) {\n        element.addEventListener(\"input\", (e) => {\n          this.handleInputChange(field, e.target.value);\n          this.clearError(field);\n\n          // Update character count for custom prompt\n          if (field === \"customPrompt\") {\n            this.updateCharCount(e.target.value);\n          }\n        });\n      }\n    });\n\n    // Reset button\n    this.elements.resetBtn.addEventListener(\"click\", () => {\n      this.resetSettings();\n    });\n\n    // Auto-save when popup is about to close\n    this.bindAutoSaveEvents();\n  }\n\n  bindAutoSaveEvents() {\n    // Save when popup window is about to close\n    window.addEventListener(\"beforeunload\", () => {\n      this.saveSettingsImmediately();\n    });\n\n    // Save when popup loses focus (user clicks outside)\n    window.addEventListener(\"blur\", () => {\n      this.saveSettingsImmediately();\n    });\n\n    // Save when page visibility changes (popup closes)\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.visibilityState === \"hidden\") {\n        this.saveSettingsImmediately();\n      }\n    });\n\n    // Save when popup loses focus (alternative method)\n    window.addEventListener(\"pagehide\", () => {\n      this.saveSettingsImmediately();\n    });\n  }\n\n  async loadSettings() {\n    try {\n      const settings = await StorageManager.getSettings();\n\n      // Update form fields\n      this.elements.enabledSwitch.checked = settings.isEnabled;\n      this.elements.apiKey.value = settings.apiKey || \"\";\n      this.elements.selectedModel.value = settings.selectedModel || \"sonar-pro\";\n      this.elements.urlTemplate.value = settings.urlTemplate || \"\";\n      this.elements.documentUrl.value = settings.documentUrl || \"\";\n      this.elements.databaseUrl.value = settings.databaseUrl || \"\";\n      this.elements.instructionUrl.value = settings.instructionUrl || \"\";\n      this.elements.customPrompt.value = settings.customPrompt || \"\";\n\n      // Update UI\n      this.updateStatusText(settings.isEnabled);\n      this.updateCharCount(settings.customPrompt || \"\");\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      this.showSaveStatus(\"error\", \"Lỗi tải cài đặt\");\n    }\n  }\n\n  handleInputChange(field, value) {\n    if (this.isInitialLoad) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Debounce save\n    this.saveTimeout = setTimeout(async () => {\n      await this.saveSettings();\n    }, 1000);\n  }\n\n  async saveSettings() {\n    try {\n      this.showSaveStatus(\"saving\", \"Đang lưu...\");\n\n      const settings = {\n        isEnabled: this.elements.enabledSwitch.checked,\n        apiKey: this.elements.apiKey.value.trim(),\n        selectedModel: this.elements.selectedModel.value,\n        urlTemplate: this.elements.urlTemplate.value.trim(),\n        documentUrl: this.elements.documentUrl.value.trim(),\n        databaseUrl: this.elements.databaseUrl.value.trim(),\n        instructionUrl: this.elements.instructionUrl.value.trim(),\n        customPrompt: this.elements.customPrompt.value.trim(),\n      };\n\n      // Validate settings\n      const validation = StorageManager.validateSettings(settings);\n      if (!validation.isValid) {\n        this.showValidationErrors(validation.errors);\n        this.showSaveStatus(\"error\", \"Lỗi validation\");\n        return;\n      }\n\n      // Save settings\n      const success = await StorageManager.saveSettings(settings);\n      if (success) {\n        this.showSaveStatus(\"saved\", \"Đã lưu\");\n        this.clearAllErrors();\n      } else {\n        this.showSaveStatus(\"error\", \"Lỗi lưu\");\n      }\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      this.showSaveStatus(\"error\", \"Lỗi lưu\");\n    }\n  }\n\n  // Save settings immediately without debounce or UI feedback\n  async saveSettingsImmediately() {\n    try {\n      // Clear any pending save timeout\n      if (this.saveTimeout) {\n        clearTimeout(this.saveTimeout);\n        this.saveTimeout = null;\n      }\n\n      const settings = {\n        isEnabled: this.elements.enabledSwitch.checked,\n        apiKey: this.elements.apiKey.value.trim(),\n        selectedModel: this.elements.selectedModel.value,\n        urlTemplate: this.elements.urlTemplate.value.trim(),\n        documentUrl: this.elements.documentUrl.value.trim(),\n        databaseUrl: this.elements.databaseUrl.value.trim(),\n        instructionUrl: this.elements.instructionUrl.value.trim(),\n        customPrompt: this.elements.customPrompt.value.trim(),\n      };\n\n      // Save settings without validation to ensure data is preserved\n      // even if some fields are invalid\n      await StorageManager.saveSettings(settings);\n    } catch (error) {\n      console.error(\"Error saving settings immediately:\", error);\n    }\n  }\n\n  async resetSettings() {\n    if (confirm(\"Bạn có chắc muốn reset tất cả cài đặt về mặc định?\")) {\n      try {\n        await StorageManager.resetSettings();\n        await this.loadSettings();\n        this.showSaveStatus(\"saved\", \"Đã reset\");\n      } catch (error) {\n        console.error(\"Error resetting settings:\", error);\n        this.showSaveStatus(\"error\", \"Lỗi reset\");\n      }\n    }\n  }\n\n  updateStatusText(isEnabled) {\n    this.elements.statusText.textContent = isEnabled ? \"Bật\" : \"Tắt\";\n    this.elements.statusText.style.color = isEnabled ? \"#28a745\" : \"#6c757d\";\n  }\n\n  updateCharCount(text) {\n    const count = text.length;\n    this.elements.charCount.textContent = `${count} ký tự`;\n\n    // Color coding\n    if (count < 10) {\n      this.elements.charCount.style.color = \"#dc3545\";\n    } else if (count < 50) {\n      this.elements.charCount.style.color = \"#ffc107\";\n    } else {\n      this.elements.charCount.style.color = \"#28a745\";\n    }\n  }\n\n  showSaveStatus(type, message) {\n    const statusElement = this.elements.saveStatus;\n    const iconElement = this.elements.saveIcon;\n    const textElement = this.elements.saveText;\n\n    // Remove existing classes\n    statusElement.className = \"save-status\";\n    iconElement.className = \"save-icon\";\n\n    // Add new classes\n    statusElement.classList.add(type);\n    if (type === \"saving\") {\n      iconElement.classList.add(\"spinning\");\n      iconElement.textContent = \"⏳\";\n    } else if (type === \"saved\") {\n      iconElement.textContent = \"✅\";\n    } else if (type === \"error\") {\n      iconElement.textContent = \"❌\";\n    }\n\n    textElement.textContent = message;\n    statusElement.style.display = \"flex\";\n\n    // Auto hide after delay\n    if (type !== \"saving\") {\n      setTimeout(() => {\n        statusElement.style.display = \"none\";\n      }, 3000);\n    }\n  }\n\n  showValidationErrors(errors) {\n    Object.keys(errors).forEach((field) => {\n      this.showError(field, errors[field]);\n    });\n  }\n\n  showError(field, message) {\n    const inputElement = this.elements[field];\n    const errorElement = document.getElementById(`${field}Error`);\n\n    if (inputElement && errorElement) {\n      inputElement.classList.add(\"error\");\n      errorElement.textContent = message;\n      errorElement.classList.add(\"show\");\n    }\n  }\n\n  clearError(field) {\n    const inputElement = this.elements[field];\n    const errorElement = document.getElementById(`${field}Error`);\n\n    if (inputElement && errorElement) {\n      inputElement.classList.remove(\"error\");\n      errorElement.classList.remove(\"show\");\n    }\n  }\n\n  clearAllErrors() {\n    const errorElements = document.querySelectorAll(\".error-message\");\n    const inputElements = document.querySelectorAll(\n      \".form-input, .form-select, .form-textarea\"\n    );\n\n    errorElements.forEach((el) => el.classList.remove(\"show\"));\n    inputElements.forEach((el) => el.classList.remove(\"error\"));\n  }\n}\n\n// Initialize popup when DOM is loaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new PopupManager();\n});\n"],"names":["EXTENSION_SETTINGS_KEY","DEFAULT_SETTINGS","window","location","hostname","includes","apiKey","urlTemplate","customPrompt","documentUrl","databaseUrl","instructionUrl","isEnabled","selectedModel","StorageManager","getSettings","chrome","storage","sync","get","error","console","saveSettings","settings","set","updateSetting","field","value","updatedSettings","this","resetSettings","remove","validateSettings","_settings$apiKey","_settings$urlTemplate","_settings$documentUrl","_settings$databaseUrl","errors","trim","validationResult","validateConfluencePageLink","valid","isValidUrl","isValid","Object","keys","length","url","URL","link","out","pageId","u","pageIdParam","searchParams","test","pathParts","pathname","split","pagesIndex","indexOf","candidate","PopupManager","constructor","isInitialLoad","saveTimeout","elements","init","bindElements","bindEvents","loadSettings","enabledSwitch","document","getElementById","statusText","charCount","saveStatus","saveIcon","saveText","resetBtn","addEventListener","e","updateStatusText","target","checked","handleInputChange","forEach","element","clearError","updateCharCount","bindAutoSaveEvents","saveSettingsImmediately","visibilityState","showSaveStatus","clearTimeout","setTimeout","async","validation","showValidationErrors","clearAllErrors","confirm","textContent","style","color","text","count","type","message","statusElement","iconElement","textElement","className","classList","add","display","showError","inputElement","errorElement","errorElements","querySelectorAll","inputElements","el"],"sourceRoot":""}