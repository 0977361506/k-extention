{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://k-tool-extension-clean/./src/shared/constants.js","webpack://k-tool-extension-clean/./src/content/utils/storageManager.js","webpack://k-tool-extension-clean/./src/popup/popup.js"],"sourcesContent":["// K-Tool Extension Constants\nexport const EXTENSION_SETTINGS_KEY = \"extensionSettings\";\n\n// API URLs\nconst isLocal =\n  window.location.hostname === \"localhost\" ||\n  window.location.hostname === \"127.0.0.1\" ||\n  window.location.hostname.includes(\"localhost\");\nconst rootUrl = isLocal\n  ? \"http://localhost:5001\"\n  : \"https://document.thangnotes.dev\";\n\n// Confluence API URLs (always localhost:8090 for Confluence)\nconst confluenceBaseUrl = isLocal\n  ? \"http://localhost:8090\"\n  : \"https://confluence.mbbank.com.vn\";\n\nexport const API_URLS = {\n  GEN_DOC: `${rootUrl}/api/generate-full-confluence-doc`,\n  GEN_DOC_STATUS: `${rootUrl}/api/generate-status`,\n  GEN_DOC_RESULT: `${rootUrl}/api/generate-result`,\n  EDIT_DIAGRAM: `${rootUrl}/api/edit-diagram`,\n  EDIT_MERMAID: `${rootUrl}/api/edit-mermaid`,\n  EDIT_TEXT: `${rootUrl}/api/edit-text`,\n  EDIT_HTML_CONTENT: `${rootUrl}/api/edit-html-content`,\n  CONVERT_HTML_TO_XHTML: `${rootUrl}/api/html-to-xhtml`,\n};\n\nexport const CONFLUENCE_API_URLS = {\n  MERMAID_DIAGRAM: `${confluenceBaseUrl}/rest/mermaidrest/1.0/mermaid/diagram`,\n  MERMAID_SAVE: `${confluenceBaseUrl}/rest/mermaidrest/1.0/mermaid/save`,\n  MERMAID_UPDATE: `${confluenceBaseUrl}/rest/mermaidrest/1.0/mermaid`, // /{pageId}\n  MERMAID_EDIT_REFERER: `${confluenceBaseUrl}/plugins/mermaid-cloud/editMermaidDiagram.action`,\n  TINYMCE_PLACEHOLDER: `${confluenceBaseUrl}/rest/tinymce/1/macro/placeholder`,\n};\n\n// Default settings\nexport const DEFAULT_SETTINGS = {\n  apiKey: \"\",\n  urlTemplate: \"\",\n  customPrompt: \"\",\n  documentUrl: \"\",\n  databaseUrl: \"\",\n  instructionUrl: \"\",\n  isEnabled: true,\n  selectedModel: \"sonar-pro\",\n};\n\n// AI Models\nexport const AI_MODELS = {\n  \"sonar-pro\": {\n    name: \"Sonar Pro\",\n    provider: \"Perplexity\",\n    description: \"Perplexity AI Sonar Pro model\",\n  },\n  gemini: {\n    name: \"Gemini 2.0 Flash\",\n    provider: \"Google\",\n    description: \"Google Gemini 2.0 Flash model\",\n  },\n};\n\n// Progress steps for document generation\nexport const PROGRESS_STEPS = [\n  { id: \"fetch\", label: \"Fetch BA Content\", status: \"pending\" },\n  { id: \"clone\", label: \"Clone Template\", status: \"pending\" },\n  { id: \"analyze\", label: \"Analyze Placeholders\", status: \"pending\" },\n  { id: \"generate\", label: \"AI Generate Document\", status: \"pending\" },\n  { id: \"complete\", label: \"Complete\", status: \"pending\" },\n];\n\n// Validation patterns\nexport const VALIDATION = {\n  URL_PATTERN: /^https?:\\/\\/.+/,\n  PLACEHOLDER_PATTERN: /<<([^>]+)>>/g,\n  MIN_PROMPT_LENGTH: 10,\n};\n","/**\n * Unified Storage Manager - Handles all storage operations\n * Supports Chrome storage, localStorage, content backup, and settings\n */\n\n// Import constants from shared\nimport {\n  DEFAULT_SETTINGS,\n  EXTENSION_SETTINGS_KEY,\n} from \"../../shared/constants.js\";\n\nexport class StorageManager {\n  // Storage keys constants\n  static STORAGE_KEYS = {\n    CONFLUENCE_CONTENT_BACKUP: \"confluence_content_backup\",\n    CONFLUENCE_CONTENT_DRAFT: \"confluence_content_draft\",\n    MERMAID_DIAGRAM_MAPPINGS: \"mermaid_diagram_mappings\",\n    MERMAID_DIAGRAM_MAPPINGS_DRAFT: \"mermaid_diagram_mappings_draft\",\n    MERMAID_AI_FILENAME: \"mermaid-ai-filename\",\n    MERMAID_DIAGRAM_INFO: \"mermaid_diagram_info\",\n    CONFLUENCE_EDITOR_BACKUP: \"confluence_editor_backup\",\n  };\n\n  constructor() {\n    this.STORAGE_KEY = StorageManager.STORAGE_KEYS.CONFLUENCE_CONTENT_BACKUP;\n    this.AUTO_SAVE_INTERVAL = 30000; // 30 seconds\n    this.autoSaveTimer = null;\n  }\n\n  // ========== CHROME STORAGE METHODS (from shared/storage.js) ==========\n\n  /**\n   * Load settings from Chrome storage\n   * @returns {Promise<Object>} Settings object\n   */\n  static async getSettings() {\n    try {\n      const result = await chrome.storage.sync.get([EXTENSION_SETTINGS_KEY]);\n      return result[EXTENSION_SETTINGS_KEY] || DEFAULT_SETTINGS;\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      return DEFAULT_SETTINGS;\n    }\n  }\n\n  /**\n   * Save settings to Chrome storage\n   * @param {Object} settings - Settings object to save\n   * @returns {Promise<boolean>} Success status\n   */\n  static async saveSettings(settings) {\n    try {\n      await chrome.storage.sync.set({ [EXTENSION_SETTINGS_KEY]: settings });\n      return true;\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Update specific setting field\n   * @param {string} field - Field name to update\n   * @param {any} value - New value\n   * @returns {Promise<boolean>} Success status\n   */\n  static async updateSetting(field, value) {\n    try {\n      const currentSettings = await this.getSettings();\n      const updatedSettings = { ...currentSettings, [field]: value };\n      return await this.saveSettings(updatedSettings);\n    } catch (error) {\n      console.error(\"Error updating setting:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Reset settings to default\n   * @returns {Promise<boolean>} Success status\n   */\n  static async resetSettings() {\n    try {\n      await chrome.storage.sync.remove([EXTENSION_SETTINGS_KEY]);\n      return true;\n    } catch (error) {\n      console.error(\"Error resetting settings:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Validate settings object\n   * @param {Object} settings - Settings to validate\n   * @returns {Object} Validation result with errors\n   */\n  static validateSettings(settings) {\n    const errors = {};\n\n    if (!settings.apiKey?.trim()) {\n      errors.apiKey = \"API Key là bắt buộc\";\n    }\n\n    if (!settings.urlTemplate?.trim()) {\n      errors.urlTemplate = \"URL Template là bắt buộc\";\n    } else {\n      const validationResult = this.validateConfluencePageLink(\n        settings.urlTemplate\n      );\n\n      if (!validationResult.valid) {\n        errors.urlTemplate =\n          validationResult.error || \"URL Template không hợp lệ.\";\n      }\n    }\n    if (!settings.documentUrl?.trim()) {\n      errors.documentUrl = \"URL thư mục lưu tài liệu là bắt buộc\";\n    } else if (!this.isValidUrl(settings.documentUrl)) {\n      errors.documentUrl = \"URL không hợp lệ\";\n    }\n\n    if (!settings.databaseUrl?.trim()) {\n      errors.databaseUrl = \"URL thư mục database là bắt buộc\";\n    } else if (!this.isValidUrl(settings.databaseUrl)) {\n      errors.databaseUrl = \"URL không hợp lệ\";\n    }\n\n    // if (!settings.customPrompt?.trim()) {\n    //   errors.customPrompt = \"Custom Prompt là bắt buộc\";\n    // } else if (settings.customPrompt.trim().length < 10) {\n    //   errors.customPrompt = \"Custom Prompt phải có ít nhất 10 ký tự\";\n    // }\n\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Get all settings keys\n   * @returns {Array<string>} Array of setting keys\n   */\n  static getSettingKeys() {\n    return Object.keys(DEFAULT_SETTINGS);\n  }\n\n  /**\n   * Check if settings exist\n   * @returns {Promise<boolean>} True if settings exist\n   */\n  static async hasSettings() {\n    try {\n      const result = await chrome.storage.sync.get([EXTENSION_SETTINGS_KEY]);\n      return !!result[EXTENSION_SETTINGS_KEY];\n    } catch (error) {\n      console.error(\"Error checking settings existence:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get specific setting value\n   * @param {string} key - Setting key\n   * @returns {Promise<any>} Setting value or default\n   */\n  static async getSetting(key) {\n    try {\n      const settings = await this.getSettings();\n      return settings[key] !== undefined\n        ? settings[key]\n        : DEFAULT_SETTINGS[key];\n    } catch (error) {\n      console.error(`Error getting setting ${key}:`, error);\n      return DEFAULT_SETTINGS[key];\n    }\n  }\n\n  /**\n   * Export settings to JSON\n   * @returns {Promise<string>} JSON string of settings\n   */\n  static async exportSettings() {\n    try {\n      const settings = await this.getSettings();\n      return JSON.stringify(settings, null, 2);\n    } catch (error) {\n      console.error(\"Error exporting settings:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import settings from JSON\n   * @param {string} jsonString - JSON string of settings\n   * @returns {Promise<boolean>} Success status\n   */\n  static async importSettings(jsonString) {\n    try {\n      const settings = JSON.parse(jsonString);\n      const validation = this.validateSettings(settings);\n\n      if (!validation.isValid) {\n        throw new Error(validation.message);\n      }\n\n      return await this.saveSettings(settings);\n    } catch (error) {\n      console.error(\"Error importing settings:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all extension data from Chrome storage\n   * @returns {Promise<boolean>} Success status\n   */\n  static async clearAllChromeStorage() {\n    try {\n      await chrome.storage.sync.clear();\n      await chrome.storage.local.clear();\n      return true;\n    } catch (error) {\n      console.error(\"Error clearing Chrome storage:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if URL is valid\n   * @param {string} url - URL to validate\n   * @returns {boolean} Is valid URL\n   */\n  static isValidUrl(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Validate Confluence page link (có pageId)\n   * @param {string} link - Link Confluence để kiểm tra\n   * @returns {Object} { valid: boolean, error?: string, pageId?: string }\n   */\n  static validateConfluencePageLink(link) {\n    const out = { valid: false, error: null, pageId: null };\n\n    if (!link || typeof link !== \"string\" || !link.trim()) {\n      out.error = \"URL là bắt buộc\";\n      return out;\n    }\n\n    let u;\n    try {\n      u = new URL(link.trim());\n    } catch {\n      out.error = \"URL không hợp lệ\";\n      return out;\n    }\n\n    // check pageId in query param\n    const pageIdParam = u.searchParams.get(\"pageId\");\n    if (pageIdParam && /^\\d+$/.test(pageIdParam)) {\n      out.valid = true;\n      out.pageId = pageIdParam;\n      return out;\n    }\n\n    // check pageId in path (/pages/{id})\n    const pathParts = u.pathname.split(\"/\");\n    const pagesIndex = pathParts.indexOf(\"pages\");\n    if (pagesIndex >= 0 && pathParts.length > pagesIndex + 1) {\n      const candidate = pathParts[pagesIndex + 1];\n      if (/^\\d+$/.test(candidate)) {\n        out.valid = true;\n        out.pageId = candidate;\n        return out;\n      }\n    }\n\n    out.error = \"Không tìm thấy pageId trong URL\";\n    return out;\n  }\n\n  // ========== CONTENT STORAGE METHODS (original) ==========\n\n  /**\n   * Save content with multiple strategies\n   * @param {Object} content - Content to save\n   * @param {Function} saveCallback - Optional callback for external save\n   * @param {Object} options - Save options\n   */\n  async saveContent(content, saveCallback = null, options = {}) {\n    const {\n      enableLocalStorage = true,\n      enableCallback = true,\n      showNotification = true,\n    } = options;\n\n    const results = {\n      localStorage: false,\n      callback: false,\n      errors: [],\n    };\n\n    // 1. Save to localStorage as backup\n    if (enableLocalStorage) {\n      try {\n        this.saveToLocalStorage(content);\n        results.localStorage = true;\n\n      } catch (error) {\n        console.error(\"❌ Failed to save to localStorage:\", error);\n        results.errors.push(`localStorage: ${error.message}`);\n      }\n    }\n\n    // 2. Call external save callback\n    if (enableCallback && saveCallback) {\n      try {\n        await this.callSaveCallback(saveCallback, content);\n        results.callback = true;\n\n      } catch (error) {\n        console.error(\"❌ Failed to save via callback:\", error);\n        results.errors.push(`callback: ${error.message}`);\n      }\n    }\n\n    // 3. Show notification\n    if (showNotification) {\n      this.showSaveNotification(results);\n    }\n\n    return results;\n  }\n\n  /**\n   * Save content to localStorage\n   * @param {Object} content - Content to save\n   */\n  saveToLocalStorage(content) {\n    const backupData = {\n      content: content,\n      timestamp: Date.now(),\n      version: \"1.0\",\n    };\n\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(backupData));\n  }\n\n  /**\n   * Load content from localStorage\n   * @returns {Object|null} Saved content or null\n   */\n  loadFromLocalStorage() {\n    try {\n      const saved = localStorage.getItem(this.STORAGE_KEY);\n      if (!saved) return null;\n\n      const backupData = JSON.parse(saved);\n\n      // Check if backup is recent (within 24 hours)\n      const age = Date.now() - backupData.timestamp;\n      const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n      if (age > maxAge) {\n        console.log(\"🗑️ Removing old localStorage backup\");\n        localStorage.removeItem(this.STORAGE_KEY);\n        return null;\n      }\n\n      console.log(\"📦 Loaded content from localStorage backup\");\n      return backupData.content;\n    } catch (error) {\n      console.error(\"❌ Failed to load from localStorage:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Clear localStorage backup\n   */\n  clearLocalStorage() {\n    localStorage.removeItem(this.STORAGE_KEY);\n    console.log(\"🗑️ Cleared localStorage backup\");\n  }\n\n  // ========== DRAFT SYSTEM METHODS ==========\n\n  /**\n   * Create draft from backup content\n   * @returns {Object|null} Draft content or null\n   */\n  createDraftFromBackup() {\n    try {\n\n      // Load backup content\n      const backupContent = this.loadFromLocalStorage();\n      if (!backupContent) {\n        console.warn(\"⚠️ No backup content found to create draft from\");\n        return null;\n      }\n\n      // Create draft with timestamp\n      const draftData = {\n        content: JSON.parse(JSON.stringify(backupContent)), // Deep copy\n        timestamp: Date.now(),\n        version: \"1.0\",\n        isDraft: true,\n      };\n\n      // Save draft to localStorage\n      localStorage.setItem(\n        StorageManager.STORAGE_KEYS.CONFLUENCE_CONTENT_DRAFT,\n        JSON.stringify(draftData)\n      );\n\n      console.log(\"✅ Draft created from backup content:\", {\n        hasContent: !!draftData.content,\n        timestamp: new Date(draftData.timestamp).toLocaleString(),\n      });\n\n      return draftData.content;\n    } catch (error) {\n      console.error(\"❌ Failed to create draft from backup:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Save content to draft\n   * @param {Object} content - Content to save to draft\n   */\n  saveToDraft(content) {\n    try {\n      const draftData = {\n        content: content,\n        timestamp: Date.now(),\n        version: \"1.0\",\n        isDraft: true,\n      };\n\n      localStorage.setItem(\n        StorageManager.STORAGE_KEYS.CONFLUENCE_CONTENT_DRAFT,\n        JSON.stringify(draftData)\n      );\n\n      console.log(\"💾 Content saved to draft:\", {\n        hasContent: !!content,\n        timestamp: new Date(draftData.timestamp).toLocaleString(),\n      });\n    } catch (error) {\n      console.error(\"❌ Failed to save to draft:\", error);\n    }\n  }\n\n  /**\n   * Load content from draft\n   * @returns {Object|null} Draft content or null\n   */\n  loadFromDraft() {\n    try {\n      const saved = localStorage.getItem(\n        StorageManager.STORAGE_KEYS.CONFLUENCE_CONTENT_DRAFT\n      );\n      if (!saved) return null;\n\n      const draftData = JSON.parse(saved);\n      console.log(\"📖 Loaded content from draft:\", {\n        hasContent: !!draftData.content,\n        timestamp: new Date(draftData.timestamp).toLocaleString(),\n        isDraft: draftData.isDraft,\n      });\n\n      return draftData.content;\n    } catch (error) {\n      console.error(\"❌ Failed to load from draft:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Save draft to backup (commit changes)\n   * @returns {boolean} Success status\n   */\n  commitDraftToBackup() {\n    try {\n\n      // Load draft content\n      const draftContent = this.loadFromDraft();\n      if (!draftContent) {\n        console.warn(\"⚠️ No draft content found to commit\");\n        return false;\n      }\n\n      // Save draft content as backup\n      this.saveToLocalStorage(draftContent);\n\n      // Clear draft after successful commit\n      this.clearDraft();\n\n      return true;\n    } catch (error) {\n      console.error(\"❌ Failed to commit draft to backup:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear draft content\n   */\n  clearDraft() {\n    try {\n      localStorage.removeItem(\n        StorageManager.STORAGE_KEYS.CONFLUENCE_CONTENT_DRAFT\n      );\n      console.log(\"🗑️ Draft cleared\");\n    } catch (error) {\n      console.error(\"❌ Failed to clear draft:\", error);\n    }\n  }\n\n  /**\n   * Check if draft exists\n   * @returns {boolean} True if draft exists\n   */\n  hasDraft() {\n    try {\n      const saved = localStorage.getItem(\n        StorageManager.STORAGE_KEYS.CONFLUENCE_CONTENT_DRAFT\n      );\n      return !!saved;\n    } catch (error) {\n      console.error(\"❌ Failed to check draft existence:\", error);\n      return false;\n    }\n  }\n\n  // ===== MERMAID DIAGRAM MAPPINGS DRAFT METHODS =====\n\n  // Create draft from main mermaid diagram mappings\n  createMermaidDiagramMappingsDraft() {\n    try {\n      const mainMappings = this.getMermaidDiagramMappings();\n      const draftData = {\n        mappings: Array.from(mainMappings.entries()), // Convert Map to array for storage\n        timestamp: Date.now(),\n        version: \"1.0\",\n        isDraft: true,\n      };\n      localStorage.setItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS_DRAFT,\n        JSON.stringify(draftData)\n      );\n\n      return mainMappings;\n    } catch (error) {\n      console.error(\"❌ Error creating Mermaid diagram mappings draft:\", error);\n      return new Map();\n    }\n  }\n\n  // Save mermaid diagram mappings to draft\n  saveMermaidDiagramMappingsToDraft(mappings) {\n    try {\n      const draftData = {\n        mappings: Array.from(mappings.entries()), // Convert Map to array for storage\n        timestamp: Date.now(),\n        version: \"1.0\",\n        isDraft: true,\n      };\n      localStorage.setItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS_DRAFT,\n        JSON.stringify(draftData)\n      );\n\n    } catch (error) {\n      console.error(\n        \"❌ Error saving Mermaid diagram mappings to draft:\",\n        error\n      );\n    }\n  }\n\n  // Load mermaid diagram mappings from draft\n  loadMermaidDiagramMappingsFromDraft() {\n    try {\n      const saved = localStorage.getItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS_DRAFT\n      );\n\n      if (!saved) return null;\n\n      const draftData = JSON.parse(saved);\n\n      const mappings = new Map(draftData.mappings); // Convert array back to Map\n\n      console.log(\n        \"🔍 DEBUG: Draft mappings keys:\",\n        Array.from(mappings.keys())\n      );\n      return mappings;\n    } catch (error) {\n      console.error(\n        \"❌ Error loading Mermaid diagram mappings from draft:\",\n        error\n      );\n      return null;\n    }\n  }\n\n  // Commit draft to main mermaid diagram mappings\n  commitMermaidDiagramMappingsDraftToMain() {\n    try {\n\n      // Check what's in draft before commit\n      const draftMappings = this.loadMermaidDiagramMappingsFromDraft();\n      if (!draftMappings) {\n        console.warn(\"⚠️ No draft mappings to commit\");\n        return false;\n      }\n\n      // Check what's in main before clearing\n      const oldMainMappings = this.getMermaidDiagramMappings();\n\n      // Clear old main mappings completely first\n      console.log(\"🗑️ Clearing old main Mermaid diagram mappings...\");\n      localStorage.removeItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS\n      );\n\n      // Verify clearing worked\n      const afterClear = localStorage.getItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS\n      );\n\n      // Save draft mappings as new main mappings\n      console.log(\n        `📝 Saving ${draftMappings.size} draft mappings as main mappings...`\n      );\n      const saveSuccess = this.saveMermaidDiagramMappings(draftMappings);\n\n      // Verify save worked\n      const newMainMappings = this.getMermaidDiagramMappings();\n\n      // Clear draft after successful commit\n      this.clearMermaidDiagramMappingsDraft();\n\n      return true;\n    } catch (error) {\n      console.error(\n        \"❌ Error committing Mermaid diagram mappings draft:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  // Clear mermaid diagram mappings draft\n  clearMermaidDiagramMappingsDraft() {\n    try {\n      localStorage.removeItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS_DRAFT\n      );\n      console.log(\"🗑️ Cleared Mermaid diagram mappings draft\");\n    } catch (error) {\n      console.error(\"❌ Error clearing Mermaid diagram mappings draft:\", error);\n    }\n  }\n\n  // Check if mermaid diagram mappings draft exists\n  hasMermaidDiagramMappingsDraft() {\n    const saved = localStorage.getItem(\n      StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS_DRAFT\n    );\n    return !!saved;\n  }\n\n  // Get mermaid diagram mappings (draft first, then main)\n  getMermaidDiagramMappingsWithDraft() {\n    const draftMappings = this.loadMermaidDiagramMappingsFromDraft();\n    if (draftMappings) {\n\n      return draftMappings;\n    }\n\n    return this.getMermaidDiagramMappings();\n  }\n\n  /**\n   * Call external save callback\n   * @param {Function} callback - Save callback function\n   * @param {Object} content - Content to save\n   */\n  async callSaveCallback(callback, content) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"Save callback is not a function\");\n    }\n\n    // Handle both sync and async callbacks\n    const result = callback(content);\n    if (result && typeof result.then === \"function\") {\n      await result;\n    }\n  }\n\n  /**\n   * Show save notification\n   * @param {Object} results - Save results\n   */\n  showSaveNotification(results) {\n    const { localStorage, callback, errors } = results;\n\n    if (localStorage && callback) {\n      this.showNotification(\"✅ Đã lưu thay đổi thành công\", \"success\");\n    } else if (localStorage || callback) {\n      const method = localStorage ? \"localStorage\" : \"callback\";\n      this.showNotification(`⚠️ Đã lưu qua ${method} (một phần)`, \"warning\");\n    } else {\n      this.showNotification(\"❌ Không thể lưu thay đổi\", \"error\");\n    }\n\n    if (errors.length > 0) {\n      console.warn(\"Save errors:\", errors);\n    }\n  }\n\n  /**\n   * Show notification to user\n   * @param {string} message - Notification message\n   * @param {string} type - Notification type (success, warning, error)\n   */\n  showNotification(message, type = \"info\") {\n    // Create notification element\n    const notification = document.createElement(\"div\");\n    notification.className = `confluence-editor-notification ${type}`;\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      padding: 12px 20px;\n      border-radius: 6px;\n      color: white;\n      font-family: Arial, sans-serif;\n      font-size: 14px;\n      z-index: 10001;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      transition: all 0.3s ease;\n      max-width: 300px;\n    `;\n\n    // Set background color based on type\n    const colors = {\n      success: \"#28a745\",\n      warning: \"#ffc107\",\n      error: \"#dc3545\",\n      info: \"#17a2b8\",\n    };\n    notification.style.background = colors[type] || colors.info;\n\n    notification.textContent = message;\n    document.body.appendChild(notification);\n\n    // Auto remove after 3 seconds\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.style.opacity = \"0\";\n        notification.style.transform = \"translateX(100%)\";\n        setTimeout(() => {\n          notification.remove();\n        }, 300);\n      }\n    }, 3000);\n  }\n\n  /**\n   * Start auto-save timer\n   * @param {Function} saveFunction - Function to call for auto-save\n   */\n  startAutoSave(saveFunction) {\n    this.stopAutoSave();\n\n    this.autoSaveTimer = setInterval(() => {\n      try {\n        saveFunction();\n\n      } catch (error) {\n        console.error(\"❌ Auto-save failed:\", error);\n      }\n    }, this.AUTO_SAVE_INTERVAL);\n\n    console.log(\"⏰ Auto-save started (every 30 seconds)\");\n  }\n\n  /**\n   * Stop auto-save timer\n   */\n  stopAutoSave() {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n      this.autoSaveTimer = null;\n      console.log(\"⏹️ Auto-save stopped\");\n    }\n  }\n\n  /**\n   * Check if there are unsaved changes in localStorage\n   * @param {Object} currentContent - Current content to compare\n   * @returns {boolean} True if there are unsaved changes\n   */\n  hasUnsavedChanges(currentContent) {\n    const saved = this.loadFromLocalStorage();\n    if (!saved) return false;\n\n    try {\n      const currentStr = JSON.stringify(currentContent);\n      const savedStr = JSON.stringify(saved);\n      return currentStr !== savedStr;\n    } catch (error) {\n      console.error(\"❌ Error comparing content:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get backup info\n   * @returns {Object|null} Backup information\n   */\n  getBackupInfo() {\n    try {\n      const saved = localStorage.getItem(this.STORAGE_KEY);\n      if (!saved) return null;\n\n      const backupData = JSON.parse(saved);\n      return {\n        timestamp: backupData.timestamp,\n        age: Date.now() - backupData.timestamp,\n        version: backupData.version,\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Get item from localStorage\n   * @param {string} key - Storage key\n   * @returns {Promise<any>} Stored value or null\n   */\n  async getItem(key) {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.error(`❌ Error getting item from localStorage (${key}):`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Set item to localStorage\n   * @param {string} key - Storage key\n   * @param {any} value - Value to store\n   * @returns {Promise<void>}\n   */\n  async setItem(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`❌ Error setting item to localStorage (${key}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove item from localStorage\n   * @param {string} key - Storage key\n   * @returns {Promise<void>}\n   */\n  async removeItem(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error(\n        `❌ Error removing item from localStorage (${key}):`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Save Mermaid diagram mappings to localStorage\n   * @param {Map} diagramsMap - Map of diagram ID to diagram data\n   * @returns {boolean} Success status\n   */\n  saveMermaidDiagramMappings(diagramsMap) {\n    try {\n      if (!diagramsMap || diagramsMap.size === 0) {\n        console.log(\"🗂️ No diagrams to save, clearing mappings\");\n        localStorage.removeItem(\n          StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS\n        );\n        return true;\n      }\n\n      // Convert Map to plain object for storage\n      const mappingsObject = {};\n      diagramsMap.forEach((diagramData, diagramId) => {\n        mappingsObject[diagramId] = {\n          title: diagramData.title,\n          type: diagramData.type,\n          content: diagramData.content,\n          originCode: diagramData.originCode, // Store the original match[0] exactly as is\n          timestamp: Date.now(),\n        };\n      });\n\n      localStorage.setItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS,\n        JSON.stringify(mappingsObject)\n      );\n\n      console.log(\n        `✅ Saved ${diagramsMap.size} Mermaid diagram mappings to localStorage`\n      );\n      return true;\n    } catch (error) {\n      console.error(\"❌ Error saving Mermaid diagram mappings:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Load Mermaid diagram mappings from localStorage\n   * @returns {Map} Map of diagram ID to diagram data\n   */\n  getMermaidDiagramMappings() {\n    try {\n      const stored = localStorage.getItem(\n        StorageManager.STORAGE_KEYS.MERMAID_DIAGRAM_MAPPINGS\n      );\n      if (!stored) {\n\n        return new Map();\n      }\n\n      const mappingsObject = JSON.parse(stored);\n      const diagramsMap = new Map();\n\n      // Convert plain object back to Map\n      Object.entries(mappingsObject).forEach(([diagramId, diagramData]) => {\n        diagramsMap.set(diagramId, diagramData);\n      });\n\n      console.log(\n        `📊 Loaded ${diagramsMap.size} Mermaid diagram mappings from localStorage`\n      );\n      return diagramsMap;\n    } catch (error) {\n      console.error(\"❌ Error loading Mermaid diagram mappings:\", error);\n      return new Map();\n    }\n  }\n\n  /**\n   * Clear all K-Tool related localStorage keys\n   * @returns {Promise<Object>} Result with cleared and failed keys\n   */\n  async clearAllKToolData() {\n    const keysToRemove = Object.values(StorageManager.STORAGE_KEYS);\n    const clearedKeys = [];\n    const failedKeys = [];\n\n    for (const key of keysToRemove) {\n      try {\n        await this.removeItem(key);\n        clearedKeys.push(key);\n      } catch (error) {\n        failedKeys.push({ key, error: error.message });\n      }\n    }\n\n    if (failedKeys.length > 0) {\n      console.warn(\"⚠️ Failed to clear some keys:\", failedKeys);\n    }\n\n    return { clearedKeys, failedKeys };\n  }\n}\n","// K-Tool Extension Popup Script\nimport { StorageManager } from \"../content/utils/storageManager.js\";\n\nclass PopupManager {\n  constructor() {\n    this.isInitialLoad = true;\n    this.saveTimeout = null;\n    this.elements = {};\n    this.init();\n  }\n\n  async init() {\n    this.bindElements();\n    this.bindEvents();\n    await this.loadSettings();\n    this.isInitialLoad = false;\n  }\n\n  bindElements() {\n    // Form elements\n    this.elements = {\n      enabledSwitch: document.getElementById(\"enabledSwitch\"),\n      statusText: document.getElementById(\"statusText\"),\n      apiKey: document.getElementById(\"apiKey\"),\n      selectedModel: document.getElementById(\"selectedModel\"),\n      urlTemplate: document.getElementById(\"urlTemplate\"),\n      documentUrl: document.getElementById(\"documentUrl\"),\n      databaseUrl: document.getElementById(\"databaseUrl\"),\n      instructionUrl: document.getElementById(\"instructionUrl\"),\n      customPrompt: document.getElementById(\"customPrompt\"),\n      charCount: document.getElementById(\"charCount\"),\n      saveStatus: document.getElementById(\"saveStatus\"),\n      saveIcon: document.getElementById(\"saveIcon\"),\n      saveText: document.getElementById(\"saveText\"),\n      resetBtn: document.getElementById(\"resetBtn\"),\n    };\n  }\n\n  bindEvents() {\n    // Enable/disable switch\n    this.elements.enabledSwitch.addEventListener(\"change\", (e) => {\n      this.updateStatusText(e.target.checked);\n      this.handleInputChange(\"isEnabled\", e.target.checked);\n    });\n\n    // Form inputs\n    const inputFields = [\n      \"apiKey\",\n      \"selectedModel\",\n      \"urlTemplate\",\n      \"documentUrl\",\n      \"databaseUrl\",\n      \"instructionUrl\",\n      \"customPrompt\",\n    ];\n    inputFields.forEach((field) => {\n      const element = this.elements[field];\n      if (element) {\n        element.addEventListener(\"input\", (e) => {\n          this.handleInputChange(field, e.target.value);\n          this.clearError(field);\n\n          // Update character count for custom prompt\n          if (field === \"customPrompt\") {\n            this.updateCharCount(e.target.value);\n          }\n        });\n      }\n    });\n\n    // Reset button\n    this.elements.resetBtn.addEventListener(\"click\", () => {\n      this.resetSettings();\n    });\n\n    // Auto-save when popup is about to close\n    this.bindAutoSaveEvents();\n  }\n\n  bindAutoSaveEvents() {\n    // Save when popup window is about to close\n    window.addEventListener(\"beforeunload\", () => {\n      this.saveSettingsImmediately();\n    });\n\n    // Save when popup loses focus (user clicks outside)\n    window.addEventListener(\"blur\", () => {\n      this.saveSettingsImmediately();\n    });\n\n    // Save when page visibility changes (popup closes)\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.visibilityState === \"hidden\") {\n        this.saveSettingsImmediately();\n      }\n    });\n\n    // Save when popup loses focus (alternative method)\n    window.addEventListener(\"pagehide\", () => {\n      this.saveSettingsImmediately();\n    });\n  }\n\n  async loadSettings() {\n    try {\n      const settings = await StorageManager.getSettings();\n\n      // Update form fields\n      this.elements.enabledSwitch.checked = settings.isEnabled;\n      this.elements.apiKey.value = settings.apiKey || \"\";\n      this.elements.selectedModel.value = settings.selectedModel || \"sonar-pro\";\n      this.elements.urlTemplate.value = settings.urlTemplate || \"\";\n      this.elements.documentUrl.value = settings.documentUrl || \"\";\n      this.elements.databaseUrl.value = settings.databaseUrl || \"\";\n      this.elements.instructionUrl.value = settings.instructionUrl || \"\";\n      this.elements.customPrompt.value = settings.customPrompt || \"\";\n\n      // Update UI\n      this.updateStatusText(settings.isEnabled);\n      this.updateCharCount(settings.customPrompt || \"\");\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      this.showSaveStatus(\"error\", \"Lỗi tải cài đặt\");\n    }\n  }\n\n  handleInputChange(field, value) {\n    if (this.isInitialLoad) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Debounce save\n    this.saveTimeout = setTimeout(async () => {\n      await this.saveSettings();\n    }, 1000);\n  }\n\n  async saveSettings() {\n    try {\n      this.showSaveStatus(\"saving\", \"Đang lưu...\");\n\n      const settings = {\n        isEnabled: this.elements.enabledSwitch.checked,\n        apiKey: this.elements.apiKey.value.trim(),\n        selectedModel: this.elements.selectedModel.value,\n        urlTemplate: this.elements.urlTemplate.value.trim(),\n        documentUrl: this.elements.documentUrl.value.trim(),\n        databaseUrl: this.elements.databaseUrl.value.trim(),\n        instructionUrl: this.elements.instructionUrl.value.trim(),\n        customPrompt: this.elements.customPrompt.value.trim(),\n      };\n\n      // Validate settings\n      const validation = StorageManager.validateSettings(settings);\n      if (!validation.isValid) {\n        this.showValidationErrors(validation.errors);\n        this.showSaveStatus(\"error\", \"Lỗi validation\");\n        return;\n      }\n\n      // Save settings\n      const success = await StorageManager.saveSettings(settings);\n      if (success) {\n        this.showSaveStatus(\"saved\", \"Đã lưu\");\n        this.clearAllErrors();\n      } else {\n        this.showSaveStatus(\"error\", \"Lỗi lưu\");\n      }\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      this.showSaveStatus(\"error\", \"Lỗi lưu\");\n    }\n  }\n\n  // Save settings immediately without debounce or UI feedback\n  async saveSettingsImmediately() {\n    try {\n      // Clear any pending save timeout\n      if (this.saveTimeout) {\n        clearTimeout(this.saveTimeout);\n        this.saveTimeout = null;\n      }\n\n      const settings = {\n        isEnabled: this.elements.enabledSwitch.checked,\n        apiKey: this.elements.apiKey.value.trim(),\n        selectedModel: this.elements.selectedModel.value,\n        urlTemplate: this.elements.urlTemplate.value.trim(),\n        documentUrl: this.elements.documentUrl.value.trim(),\n        databaseUrl: this.elements.databaseUrl.value.trim(),\n        instructionUrl: this.elements.instructionUrl.value.trim(),\n        customPrompt: this.elements.customPrompt.value.trim(),\n      };\n\n      // Save settings without validation to ensure data is preserved\n      // even if some fields are invalid\n      await StorageManager.saveSettings(settings);\n    } catch (error) {\n      console.error(\"Error saving settings immediately:\", error);\n    }\n  }\n\n  async resetSettings() {\n    if (confirm(\"Bạn có chắc muốn reset tất cả cài đặt về mặc định?\")) {\n      try {\n        await StorageManager.resetSettings();\n        await this.loadSettings();\n        this.showSaveStatus(\"saved\", \"Đã reset\");\n      } catch (error) {\n        console.error(\"Error resetting settings:\", error);\n        this.showSaveStatus(\"error\", \"Lỗi reset\");\n      }\n    }\n  }\n\n  updateStatusText(isEnabled) {\n    this.elements.statusText.textContent = isEnabled ? \"Bật\" : \"Tắt\";\n    this.elements.statusText.style.color = isEnabled ? \"#28a745\" : \"#6c757d\";\n  }\n\n  updateCharCount(text) {\n    const count = text.length;\n    this.elements.charCount.textContent = `${count} ký tự`;\n\n    // Color coding\n    if (count < 10) {\n      this.elements.charCount.style.color = \"#dc3545\";\n    } else if (count < 50) {\n      this.elements.charCount.style.color = \"#ffc107\";\n    } else {\n      this.elements.charCount.style.color = \"#28a745\";\n    }\n  }\n\n  showSaveStatus(type, message) {\n    const statusElement = this.elements.saveStatus;\n    const iconElement = this.elements.saveIcon;\n    const textElement = this.elements.saveText;\n\n    // Remove existing classes\n    statusElement.className = \"save-status\";\n    iconElement.className = \"save-icon\";\n\n    // Add new classes\n    statusElement.classList.add(type);\n    if (type === \"saving\") {\n      iconElement.classList.add(\"spinning\");\n      iconElement.textContent = \"⏳\";\n    } else if (type === \"saved\") {\n      iconElement.textContent = \"✅\";\n    } else if (type === \"error\") {\n      iconElement.textContent = \"❌\";\n    }\n\n    textElement.textContent = message;\n    statusElement.style.display = \"flex\";\n\n    // Auto hide after delay\n    if (type !== \"saving\") {\n      setTimeout(() => {\n        statusElement.style.display = \"none\";\n      }, 3000);\n    }\n  }\n\n  showValidationErrors(errors) {\n    Object.keys(errors).forEach((field) => {\n      this.showError(field, errors[field]);\n    });\n  }\n\n  showError(field, message) {\n    const inputElement = this.elements[field];\n    const errorElement = document.getElementById(`${field}Error`);\n\n    if (inputElement && errorElement) {\n      inputElement.classList.add(\"error\");\n      errorElement.textContent = message;\n      errorElement.classList.add(\"show\");\n    }\n  }\n\n  clearError(field) {\n    const inputElement = this.elements[field];\n    const errorElement = document.getElementById(`${field}Error`);\n\n    if (inputElement && errorElement) {\n      inputElement.classList.remove(\"error\");\n      errorElement.classList.remove(\"show\");\n    }\n  }\n\n  clearAllErrors() {\n    const errorElements = document.querySelectorAll(\".error-message\");\n    const inputElements = document.querySelectorAll(\n      \".form-input, .form-select, .form-textarea\"\n    );\n\n    errorElements.forEach((el) => el.classList.remove(\"show\"));\n    inputElements.forEach((el) => el.classList.remove(\"error\"));\n  }\n}\n\n// Initialize popup when DOM is loaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new PopupManager();\n});\n"],"names":["EXTENSION_SETTINGS_KEY","DEFAULT_SETTINGS","window","location","hostname","includes","apiKey","urlTemplate","customPrompt","documentUrl","databaseUrl","instructionUrl","isEnabled","selectedModel","StorageManager","static","CONFLUENCE_CONTENT_BACKUP","CONFLUENCE_CONTENT_DRAFT","MERMAID_DIAGRAM_MAPPINGS","MERMAID_DIAGRAM_MAPPINGS_DRAFT","MERMAID_AI_FILENAME","MERMAID_DIAGRAM_INFO","CONFLUENCE_EDITOR_BACKUP","constructor","this","STORAGE_KEY","STORAGE_KEYS","AUTO_SAVE_INTERVAL","autoSaveTimer","getSettings","chrome","storage","sync","get","error","console","saveSettings","settings","set","updateSetting","field","value","updatedSettings","resetSettings","remove","validateSettings","_settings$apiKey","_settings$urlTemplate","_settings$documentUrl","_settings$databaseUrl","errors","trim","validationResult","validateConfluencePageLink","valid","isValidUrl","isValid","Object","keys","length","getSettingKeys","hasSettings","getSetting","key","undefined","exportSettings","JSON","stringify","importSettings","jsonString","parse","validation","Error","message","clearAllChromeStorage","clear","local","url","URL","link","out","pageId","u","pageIdParam","searchParams","test","pathParts","pathname","split","pagesIndex","indexOf","candidate","saveContent","content","saveCallback","options","enableLocalStorage","enableCallback","showNotification","results","localStorage","callback","saveToLocalStorage","push","callSaveCallback","showSaveNotification","backupData","timestamp","Date","now","version","setItem","loadFromLocalStorage","saved","getItem","log","removeItem","clearLocalStorage","createDraftFromBackup","backupContent","warn","draftData","isDraft","hasContent","toLocaleString","saveToDraft","loadFromDraft","commitDraftToBackup","draftContent","clearDraft","hasDraft","createMermaidDiagramMappingsDraft","mainMappings","getMermaidDiagramMappings","mappings","Array","from","entries","Map","saveMermaidDiagramMappingsToDraft","loadMermaidDiagramMappingsFromDraft","commitMermaidDiagramMappingsDraftToMain","draftMappings","size","saveMermaidDiagramMappings","clearMermaidDiagramMappingsDraft","hasMermaidDiagramMappingsDraft","getMermaidDiagramMappingsWithDraft","result","then","method","type","notification","document","createElement","className","style","cssText","colors","success","warning","info","background","textContent","body","appendChild","setTimeout","parentNode","opacity","transform","startAutoSave","saveFunction","stopAutoSave","setInterval","clearInterval","hasUnsavedChanges","currentContent","getBackupInfo","age","item","diagramsMap","mappingsObject","forEach","diagramData","diagramId","title","originCode","stored","clearAllKToolData","keysToRemove","values","clearedKeys","failedKeys","PopupManager","isInitialLoad","saveTimeout","elements","init","bindElements","bindEvents","loadSettings","enabledSwitch","getElementById","statusText","charCount","saveStatus","saveIcon","saveText","resetBtn","addEventListener","e","updateStatusText","target","checked","handleInputChange","element","clearError","updateCharCount","bindAutoSaveEvents","saveSettingsImmediately","visibilityState","showSaveStatus","clearTimeout","async","showValidationErrors","clearAllErrors","confirm","color","text","count","statusElement","iconElement","textElement","classList","add","display","showError","inputElement","errorElement","errorElements","querySelectorAll","inputElements","el"],"sourceRoot":""}