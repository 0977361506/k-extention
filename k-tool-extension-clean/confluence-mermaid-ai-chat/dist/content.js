const e="http://localhost:5001",t={EDIT_DIAGRAM:`${e}/api/edit-diagram`,EDIT_TEXT:`${e}/api/edit-text`};class a{static async request(e,t={}){const a={method:"GET",headers:{"Content-Type":"application/json"},...t};try{console.log(`📡 Making ${a.method} request to:`,e),console.log("📤 Request config:",a);const t=await fetch(e,a);if(console.log(`📡 Response status: ${t.status} ${t.statusText}`),!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const r=await t.json();return console.log("📥 Response data:",r),{success:!0,data:r,status:t.status}}catch(e){return console.error("❌ API request failed:",e),{success:!1,error:e.message,status:e.status||0}}}static async editDiagram(e){console.log("📤 Sending diagram edit request:",e);const a={diagram_content:e.diagram_content,user_prompt:e.user_prompt,context:e.context||"mermaid_diagram_editing",diagram_type:this.detectDiagramType(e.diagram_content),timestamp:(new Date).toISOString()};return await this.request(t.EDIT_DIAGRAM,{method:"POST",body:JSON.stringify(a)})}static detectDiagramType(e){if(!e||"string"!=typeof e)return"unknown";const t=e.trim().toLowerCase(),a={graph:"flowchart",flowchart:"flowchart",sequencediagram:"sequence",classdiagram:"class",statediagram:"state",erdiagram:"er",journey:"journey",gantt:"gantt",pie:"pie",gitgraph:"gitgraph",mindmap:"mindmap",timeline:"timeline",sankey:"sankey"};for(const[e,r]of Object.entries(a))if(t.startsWith(e))return r;return"flowchart"}static validateDiagramContent(e){if(!e||"string"!=typeof e)return{isValid:!1,error:"Diagram content is required"};const t=e.trim();return 0===t.length?{isValid:!1,error:"Diagram content cannot be empty"}:t.length>1e4?{isValid:!1,error:"Diagram content is too long (max 10,000 characters)"}:{isValid:!0,error:null}}static validateUserPrompt(e){if(!e||"string"!=typeof e)return{isValid:!1,error:"Please enter a prompt"};const t=e.trim();return 0===t.length?{isValid:!1,error:"Please enter a prompt"}:t.length<3?{isValid:!1,error:"Prompt is too short (minimum 3 characters)"}:t.length>1e3?{isValid:!1,error:"Prompt is too long (max 1,000 characters)"}:{isValid:!0,error:null}}static getErrorMessage(e){if(e.success)return null;const t=e.error||"Unknown error occurred",a={"HTTP 401":"🔐 Authentication required. Please check your API key.","HTTP 403":"🚫 Access denied. Please check your permissions.","HTTP 404":"🔍 Service not found. Please check the API endpoint.","HTTP 429":"⏰ Too many requests. Please wait a moment and try again.","HTTP 500":"🔧 Server error. Please try again later.","Network Error":"🌐 Network connection error. Please check your internet connection.",Timeout:"⏱️ Request timeout. Please try again."};for(const[e,r]of Object.entries(a))if(t.includes(e))return r;return`❌ ${t}`}}class r{constructor(){this.isPopupOpen=!1,this.currentMermaidContent="",this.currentMermaidElement=null,this.init()}async init(){console.log("🎨 Mermaid AI Chat initializing..."),document.getElementById("mermaid-ai-chat-root")?console.log("🔍 Mermaid AI Chat already injected, skipping..."):(this.setupMermaidDetection(),this.createPopupUI(),console.log("✅ Mermaid AI Chat ready"))}setupMermaidDetection(){console.log("🔍 Setting up Mermaid detection..."),document.addEventListener("click",e=>{this.handleClick(e)}),new MutationObserver(e=>{e.forEach(e=>{"childList"===e.type&&e.addedNodes.forEach(e=>{e.nodeType===Node.ELEMENT_NODE&&this.checkForMermaidElements(e)})})}).observe(document.body,{childList:!0,subtree:!0})}handleClick(e){const t=e.target,a=this.findMermaidElement(t);if(a){console.log("🎯 Clicked on Mermaid diagram:",a);const t=this.extractMermaidContent(a);t&&(console.log("📄 Extracted Mermaid content:",t),this.currentMermaidContent=t,this.currentMermaidElement=a,this.showChatPopup(e.clientX,e.clientY))}}findMermaidElement(e){if(this.isMermaidElement(e))return e;let t=e.parentElement;for(;t&&t!==document.body;){if(this.isMermaidElement(t))return t;t=t.parentElement}return null}isMermaidElement(e){return!(!e||!e.tagName)&&[e.classList.contains("mermaid"),e.classList.contains("mermaid-diagram"),e.querySelector&&e.querySelector(".mermaid"),e.querySelector&&e.querySelector("svg[id*='mermaid']"),"ac:structured-macro"===e.tagName.toLowerCase()&&"mermaid"===e.getAttribute("ac:name"),"svg"===e.tagName.toLowerCase()&&e.id&&e.id.includes("mermaid"),e.classList.contains("mermaid-wrapper"),e.classList.contains("diagram-container")].some(e=>e)}extractMermaidContent(e){if(console.log("🔍 Extracting Mermaid content from:",e),e.tagName&&"ac:structured-macro"===e.tagName.toLowerCase()){const t=e.querySelector('ac\\:parameter[ac\\:name="code"]');if(t)return t.textContent||t.innerText}if(e.dataset&&e.dataset.mermaid)return e.dataset.mermaid;const t=e.querySelector('script[type="text/mermaid"]');if(t)return t.textContent||t.innerText;const a=e.querySelector("pre code, code");if(a){const e=a.textContent||a.innerText;if(this.isMermaidSyntax(e))return e}const r=e.querySelector("svg")||("SVG"===e.tagName?e:null);if(r){const e=r.querySelector("title"),t=r.querySelector("desc");if(e&&this.isMermaidSyntax(e.textContent))return e.textContent;if(t&&this.isMermaidSyntax(t.textContent))return t.textContent}return"graph TD\n    A[Current Diagram] --\x3e B[AI Enhanced]\n    B --\x3e C[Updated Diagram]"}isMermaidSyntax(e){if(!e||"string"!=typeof e)return!1;const t=e.trim().toLowerCase();return["graph","flowchart","sequenceDiagram","classDiagram","stateDiagram","erDiagram","journey","gantt","pie","gitgraph","mindmap","timeline","sankey"].some(e=>t.startsWith(e))}checkForMermaidElements(e){this.isMermaidElement(e)&&console.log("🆕 New Mermaid element detected:",e),e.querySelectorAll&&e.querySelectorAll(".mermaid, [ac\\:name='mermaid'], svg[id*='mermaid']").forEach(e=>{console.log("🆕 New Mermaid child element detected:",e)})}createPopupUI(){const e=document.createElement("div");e.id="mermaid-ai-chat-root",e.innerHTML='\n      <div id="mermaid-ai-chat-popup" class="mermaid-ai-chat-popup" style="display: none;">\n        <div class="mermaid-ai-chat-header">\n          <h3>🤖 Chat with AI about this Mermaid diagram</h3>\n          <button class="mermaid-ai-chat-close">&times;</button>\n        </div>\n        <div class="mermaid-ai-chat-body">\n          <div class="mermaid-ai-chat-messages" id="mermaid-ai-chat-messages">\n            <div class="mermaid-ai-chat-message system">\n              <div class="message-content">\n                <p>👋 Hi! I can help you modify this Mermaid diagram. What would you like to change?</p>\n              </div>\n            </div>\n          </div>\n          <div class="mermaid-ai-chat-input-container">\n            <textarea \n              id="mermaid-ai-chat-input" \n              class="mermaid-ai-chat-input" \n              placeholder="Describe how you want to modify the diagram..."\n              rows="3"\n            ></textarea>\n            <button id="mermaid-ai-chat-send" class="mermaid-ai-chat-send">\n              📤 Send\n            </button>\n          </div>\n        </div>\n      </div>\n    ',document.body.appendChild(e),this.bindPopupEvents()}bindPopupEvents(){const e=document.getElementById("mermaid-ai-chat-popup"),t=e.querySelector(".mermaid-ai-chat-close"),a=document.getElementById("mermaid-ai-chat-send"),r=document.getElementById("mermaid-ai-chat-input");t.addEventListener("click",()=>{this.hideChatPopup()}),a.addEventListener("click",()=>{this.sendMessage()}),r.addEventListener("keydown",e=>{"Enter"!==e.key||e.ctrlKey||e.shiftKey||(e.preventDefault(),this.sendMessage())}),e.addEventListener("click",t=>{t.target===e&&this.hideChatPopup()})}showChatPopup(e,t){const a=document.getElementById("mermaid-ai-chat-popup");a.style.display="block",a.style.left=Math.min(e,window.innerWidth-400)+"px",a.style.top=Math.min(t,window.innerHeight-300)+"px",this.isPopupOpen=!0,setTimeout(()=>{document.getElementById("mermaid-ai-chat-input").focus()},100)}hideChatPopup(){document.getElementById("mermaid-ai-chat-popup").style.display="none",this.isPopupOpen=!1;const e=document.getElementById("mermaid-ai-chat-messages"),t=e.querySelector(".system");e.innerHTML="",e.appendChild(t),document.getElementById("mermaid-ai-chat-input").value=""}async sendMessage(){const e=document.getElementById("mermaid-ai-chat-input"),t=e.value.trim(),r=a.validateUserPrompt(t);if(!r.isValid)return void this.addMessage("assistant",`⚠️ ${r.error}`);const i=a.validateDiagramContent(this.currentMermaidContent);if(!i.isValid)return void this.addMessage("assistant",`⚠️ ${i.error}`);this.addMessage("user",t),e.value="";const n=this.addMessage("assistant","🤔 Thinking...");try{const e=await this.callAI(t);this.removeMessage(n),this.addMessage("assistant",e)}catch(e){console.error("❌ AI API error:",e),this.removeMessage(n);const t=a.getErrorMessage({success:!1,error:e.message});this.addMessage("assistant",t)}}addMessage(e,t){const a=document.getElementById("mermaid-ai-chat-messages"),r="msg-"+Date.now(),i=document.createElement("div");return i.className=`mermaid-ai-chat-message ${e}`,i.id=r,i.innerHTML=`\n      <div class="message-content">\n        <p>${t}</p>\n      </div>\n    `,a.appendChild(i),a.scrollTop=a.scrollHeight,r}removeMessage(e){const t=document.getElementById(e);t&&t.remove()}async callAI(e){const t={diagram_content:this.currentMermaidContent,user_prompt:e,context:"mermaid_diagram_editing"};console.log("📤 Sending AI request:",t);const r=await a.editDiagram(t);if(r.success)return r.data.result||r.data.response||"✅ Diagram updated successfully!";throw new Error(r.error||"Unknown error occurred")}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{window.mermaidAIChat=new r}):window.mermaidAIChat=new r;
//# sourceMappingURL=content.js.map