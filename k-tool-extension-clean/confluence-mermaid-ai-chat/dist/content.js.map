{"version":3,"file":"content.js","mappings":"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","sources":["webpack://confluence-mermaid-ai-chat/./src/shared/constants.js","webpack://confluence-mermaid-ai-chat/./src/shared/api.js","webpack://confluence-mermaid-ai-chat/./src/content/content.js"],"sourcesContent":["// Constants for Mermaid AI Chat Extension\n\n// API Configuration\nconst isLocal = true; // Set to false for production\nconst rootUrl = isLocal\n  ? \"http://localhost:5001\"\n  : \"https://gendoc.thangnotes.dev\";\n\nexport const API_URLS = {\n  EDIT_DIAGRAM: `${rootUrl}/api/edit-diagram`,\n  EDIT_TEXT: `${rootUrl}/api/edit-text`,\n};\n\n// Extension Configuration\nexport const EXTENSION_CONFIG = {\n  NAME: \"Confluence Mermaid AI Chat\",\n  VERSION: \"1.0.0\",\n  DEBUG: true,\n};\n\n// Mermaid Diagram Types\nexport const MERMAID_TYPES = {\n  FLOWCHART: \"flowchart\",\n  SEQUENCE: \"sequence\",\n  CLASS: \"class\",\n  STATE: \"state\",\n  ER: \"er\",\n  JOURNEY: \"journey\",\n  GANTT: \"gantt\",\n  PIE: \"pie\",\n  GITGRAPH: \"gitgraph\",\n  MINDMAP: \"mindmap\",\n  TIMELINE: \"timeline\",\n  SANKEY: \"sankey\",\n};\n\n// UI Configuration\nexport const UI_CONFIG = {\n  POPUP_WIDTH: 400,\n  POPUP_HEIGHT: 400,\n  MAX_MESSAGE_LENGTH: 1000,\n  MAX_DIAGRAM_LENGTH: 10000,\n  ANIMATION_DURATION: 300,\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  NO_DIAGRAM: \"No Mermaid diagram found\",\n  INVALID_DIAGRAM: \"Invalid diagram content\",\n  EMPTY_PROMPT: \"Please enter a prompt\",\n  PROMPT_TOO_SHORT: \"Prompt is too short (minimum 3 characters)\",\n  PROMPT_TOO_LONG: \"Prompt is too long (max 1,000 characters)\",\n  DIAGRAM_TOO_LONG: \"Diagram content is too long (max 10,000 characters)\",\n  API_ERROR: \"Failed to connect to AI service\",\n  NETWORK_ERROR: \"Network connection error\",\n  TIMEOUT_ERROR: \"Request timeout\",\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  DIAGRAM_UPDATED: \"✅ Diagram updated successfully!\",\n  CHAT_READY: \"🤖 AI Chat is ready\",\n  EXTENSION_LOADED: \"✅ Mermaid AI Chat extension loaded\",\n};\n\n// CSS Classes\nexport const CSS_CLASSES = {\n  POPUP: \"mermaid-ai-chat-popup\",\n  HEADER: \"mermaid-ai-chat-header\",\n  BODY: \"mermaid-ai-chat-body\",\n  MESSAGES: \"mermaid-ai-chat-messages\",\n  MESSAGE: \"mermaid-ai-chat-message\",\n  INPUT: \"mermaid-ai-chat-input\",\n  SEND_BUTTON: \"mermaid-ai-chat-send\",\n  CLOSE_BUTTON: \"mermaid-ai-chat-close\",\n};\n\n// Mermaid Detection Selectors\nexport const MERMAID_SELECTORS = [\n  \".mermaid\",\n  \".mermaid-diagram\",\n  \"svg[id*='mermaid']\",\n  \"ac\\\\:structured-macro[ac\\\\:name='mermaid']\",\n  \".mermaid-wrapper\",\n  \".diagram-container\",\n  \"script[type='text/mermaid']\",\n  \"pre code.language-mermaid\",\n  \"code.mermaid\",\n];\n\n// Mermaid Keywords for Detection\nexport const MERMAID_KEYWORDS = [\n  \"graph\",\n  \"flowchart\",\n  \"sequenceDiagram\",\n  \"classDiagram\",\n  \"stateDiagram\",\n  \"erDiagram\",\n  \"journey\",\n  \"gantt\",\n  \"pie\",\n  \"gitgraph\",\n  \"mindmap\",\n  \"timeline\",\n  \"sankey\",\n];\n\n// Default Diagram Template\nexport const DEFAULT_DIAGRAM = `graph TD\n    A[Current Diagram] --> B[AI Enhanced]\n    B --> C[Updated Diagram]\n    C --> D[Better Visualization]`;\n\n// API Request Timeout (in milliseconds)\nexport const API_TIMEOUT = 30000; // 30 seconds\n\n// Debug Configuration\nexport const DEBUG_CONFIG = {\n  LOG_API_REQUESTS: true,\n  LOG_DIAGRAM_DETECTION: true,\n  LOG_USER_INTERACTIONS: true,\n  LOG_ERROR_DETAILS: true,\n};\n","// API Client for Mermaid AI Chat\nimport { API_URLS } from \"./constants.js\";\n\nexport class ApiClient {\n  /**\n   * Make HTTP request to API\n   * @param {string} url - API endpoint URL\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} API response\n   */\n  static async request(url, options = {}) {\n    const defaultOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const config = { ...defaultOptions, ...options };\n\n    try {\n      console.log(`📡 Making ${config.method} request to:`, url);\n      console.log(\"📤 Request config:\", config);\n\n      const response = await fetch(url, config);\n      \n      console.log(`📡 Response status: ${response.status} ${response.statusText}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"📥 Response data:\", data);\n\n      return {\n        success: true,\n        data: data,\n        status: response.status,\n      };\n    } catch (error) {\n      console.error(\"❌ API request failed:\", error);\n      return {\n        success: false,\n        error: error.message,\n        status: error.status || 0,\n      };\n    }\n  }\n\n  /**\n   * Edit Mermaid diagram using AI\n   * @param {Object} payload - Edit payload\n   * @returns {Promise<Object>} Edit response\n   */\n  static async editDiagram(payload) {\n    console.log(\"📤 Sending diagram edit request:\", payload);\n\n    // Prepare the payload for the AI API\n    const apiPayload = {\n      diagram_content: payload.diagram_content,\n      user_prompt: payload.user_prompt,\n      context: payload.context || \"mermaid_diagram_editing\",\n      // Add any additional context that might be helpful\n      diagram_type: this.detectDiagramType(payload.diagram_content),\n      timestamp: new Date().toISOString(),\n    };\n\n    return await this.request(API_URLS.EDIT_DIAGRAM, {\n      method: \"POST\",\n      body: JSON.stringify(apiPayload),\n    });\n  }\n\n  /**\n   * Detect the type of Mermaid diagram\n   * @param {string} content - Mermaid diagram content\n   * @returns {string} Diagram type\n   */\n  static detectDiagramType(content) {\n    if (!content || typeof content !== \"string\") {\n      return \"unknown\";\n    }\n\n    const trimmedContent = content.trim().toLowerCase();\n\n    const diagramTypes = {\n      graph: \"flowchart\",\n      flowchart: \"flowchart\",\n      sequencediagram: \"sequence\",\n      classdiagram: \"class\",\n      statediagram: \"state\",\n      erdiagram: \"er\",\n      journey: \"journey\",\n      gantt: \"gantt\",\n      pie: \"pie\",\n      gitgraph: \"gitgraph\",\n      mindmap: \"mindmap\",\n      timeline: \"timeline\",\n      sankey: \"sankey\",\n    };\n\n    for (const [keyword, type] of Object.entries(diagramTypes)) {\n      if (trimmedContent.startsWith(keyword)) {\n        return type;\n      }\n    }\n\n    return \"flowchart\"; // Default to flowchart\n  }\n\n  /**\n   * Validate diagram content before sending to API\n   * @param {string} content - Diagram content\n   * @returns {Object} Validation result\n   */\n  static validateDiagramContent(content) {\n    if (!content || typeof content !== \"string\") {\n      return {\n        isValid: false,\n        error: \"Diagram content is required\",\n      };\n    }\n\n    const trimmedContent = content.trim();\n    if (trimmedContent.length === 0) {\n      return {\n        isValid: false,\n        error: \"Diagram content cannot be empty\",\n      };\n    }\n\n    if (trimmedContent.length > 10000) {\n      return {\n        isValid: false,\n        error: \"Diagram content is too long (max 10,000 characters)\",\n      };\n    }\n\n    return {\n      isValid: true,\n      error: null,\n    };\n  }\n\n  /**\n   * Validate user prompt before sending to API\n   * @param {string} prompt - User prompt\n   * @returns {Object} Validation result\n   */\n  static validateUserPrompt(prompt) {\n    if (!prompt || typeof prompt !== \"string\") {\n      return {\n        isValid: false,\n        error: \"Please enter a prompt\",\n      };\n    }\n\n    const trimmedPrompt = prompt.trim();\n    if (trimmedPrompt.length === 0) {\n      return {\n        isValid: false,\n        error: \"Please enter a prompt\",\n      };\n    }\n\n    if (trimmedPrompt.length < 3) {\n      return {\n        isValid: false,\n        error: \"Prompt is too short (minimum 3 characters)\",\n      };\n    }\n\n    if (trimmedPrompt.length > 1000) {\n      return {\n        isValid: false,\n        error: \"Prompt is too long (max 1,000 characters)\",\n      };\n    }\n\n    return {\n      isValid: true,\n      error: null,\n    };\n  }\n\n  /**\n   * Enhanced error handling for API responses\n   * @param {Object} response - API response\n   * @returns {string} User-friendly error message\n   */\n  static getErrorMessage(response) {\n    if (response.success) {\n      return null;\n    }\n\n    const error = response.error || \"Unknown error occurred\";\n\n    // Map common errors to user-friendly messages\n    const errorMappings = {\n      \"HTTP 401\": \"🔐 Authentication required. Please check your API key.\",\n      \"HTTP 403\": \"🚫 Access denied. Please check your permissions.\",\n      \"HTTP 404\": \"🔍 Service not found. Please check the API endpoint.\",\n      \"HTTP 429\": \"⏰ Too many requests. Please wait a moment and try again.\",\n      \"HTTP 500\": \"🔧 Server error. Please try again later.\",\n      \"Network Error\":\n        \"🌐 Network connection error. Please check your internet connection.\",\n      Timeout: \"⏱️ Request timeout. Please try again.\",\n    };\n\n    for (const [key, message] of Object.entries(errorMappings)) {\n      if (error.includes(key)) {\n        return message;\n      }\n    }\n\n    return `❌ ${error}`;\n  }\n}\n","// Mermaid AI Chat functionality for K-Tool Extension\nimport { ApiClient } from \"../shared/api.js\";\n\nexport class MermaidAIChat {\n  constructor() {\n    this.isPopupOpen = false;\n    this.currentMermaidContent = \"\";\n    this.currentMermaidElement = null;\n    this.init();\n  }\n\n  async init() {\n    console.log(\"🎨 Mermaid AI Chat initializing...\");\n\n    // Check if already injected\n    if (document.getElementById(\"mermaid-ai-chat-root\")) {\n      console.log(\"🔍 Mermaid AI Chat already injected, skipping...\");\n      return;\n    }\n\n    // Setup detection and UI\n    this.setupMermaidDetection();\n    this.createPopupUI();\n\n    console.log(\"✅ Mermaid AI Chat ready\");\n  }\n\n  setupMermaidDetection() {\n    console.log(\"🔍 Setting up Mermaid detection...\");\n\n    // Detect clicks on Mermaid diagrams\n    document.addEventListener(\"click\", (event) => {\n      this.handleClick(event);\n    });\n\n    // Also observe for dynamically added Mermaid content\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"childList\") {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              this.checkForMermaidElements(node);\n            }\n          });\n        }\n      });\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  handleClick(event) {\n    const clickedElement = event.target;\n\n    // Check if clicked on Mermaid diagram\n    const mermaidElement = this.findMermaidElement(clickedElement);\n\n    if (mermaidElement) {\n      console.log(\"🎯 Clicked on Mermaid diagram:\", mermaidElement);\n\n      // Extract Mermaid content\n      const mermaidContent = this.extractMermaidContent(mermaidElement);\n\n      if (mermaidContent) {\n        console.log(\"📄 Extracted Mermaid content:\", mermaidContent);\n        this.currentMermaidContent = mermaidContent;\n        this.currentMermaidElement = mermaidElement;\n        this.showChatPopup(event.clientX, event.clientY);\n      }\n    }\n  }\n\n  findMermaidElement(element) {\n    // Check if element itself is a Mermaid diagram\n    if (this.isMermaidElement(element)) {\n      return element;\n    }\n\n    // Check parent elements\n    let parent = element.parentElement;\n    while (parent && parent !== document.body) {\n      if (this.isMermaidElement(parent)) {\n        return parent;\n      }\n      parent = parent.parentElement;\n    }\n\n    return null;\n  }\n\n  isMermaidElement(element) {\n    if (!element || !element.tagName) return false;\n\n    // Check for various Mermaid indicators\n    const indicators = [\n      // Mermaid for Confluence plugin\n      element.classList.contains(\"mermaid\"),\n      element.classList.contains(\"mermaid-diagram\"),\n      element.querySelector && element.querySelector(\".mermaid\"),\n      element.querySelector && element.querySelector(\"svg[id*='mermaid']\"),\n\n      // Confluence structured macro\n      element.tagName.toLowerCase() === \"ac:structured-macro\" &&\n        element.getAttribute(\"ac:name\") === \"mermaid\",\n\n      // Check for Mermaid SVG content\n      element.tagName.toLowerCase() === \"svg\" &&\n        element.id &&\n        element.id.includes(\"mermaid\"),\n\n      // Check for Mermaid wrapper divs\n      element.classList.contains(\"mermaid-wrapper\"),\n      element.classList.contains(\"diagram-container\"),\n    ];\n\n    return indicators.some((indicator) => indicator);\n  }\n\n  extractMermaidContent(element) {\n    console.log(\"🔍 Extracting Mermaid content from:\", element);\n\n    // Try different methods to extract Mermaid source code\n\n    // 1. Check for Confluence structured macro\n    if (\n      element.tagName &&\n      element.tagName.toLowerCase() === \"ac:structured-macro\"\n    ) {\n      const codeParam = element.querySelector(\n        'ac\\\\:parameter[ac\\\\:name=\"code\"]'\n      );\n      if (codeParam) {\n        return codeParam.textContent || codeParam.innerText;\n      }\n    }\n\n    // 2. Check for data attributes\n    if (element.dataset && element.dataset.mermaid) {\n      return element.dataset.mermaid;\n    }\n\n    // 3. Check for script tags with Mermaid content\n    const scriptTag = element.querySelector('script[type=\"text/mermaid\"]');\n    if (scriptTag) {\n      return scriptTag.textContent || scriptTag.innerText;\n    }\n\n    // 4. Check for pre/code tags with Mermaid content\n    const codeTag = element.querySelector(\"pre code, code\");\n    if (codeTag) {\n      const content = codeTag.textContent || codeTag.innerText;\n      if (this.isMermaidSyntax(content)) {\n        return content;\n      }\n    }\n\n    // 5. Try to extract from SVG title or description\n    const svg =\n      element.querySelector(\"svg\") ||\n      (element.tagName === \"SVG\" ? element : null);\n    if (svg) {\n      const title = svg.querySelector(\"title\");\n      const desc = svg.querySelector(\"desc\");\n\n      if (title && this.isMermaidSyntax(title.textContent)) {\n        return title.textContent;\n      }\n      if (desc && this.isMermaidSyntax(desc.textContent)) {\n        return desc.textContent;\n      }\n    }\n\n    // 6. Fallback: return a generic message\n    return \"graph TD\\n    A[Current Diagram] --> B[AI Enhanced]\\n    B --> C[Updated Diagram]\";\n  }\n\n  isMermaidSyntax(text) {\n    if (!text || typeof text !== \"string\") return false;\n\n    const mermaidKeywords = [\n      \"graph\",\n      \"flowchart\",\n      \"sequenceDiagram\",\n      \"classDiagram\",\n      \"stateDiagram\",\n      \"erDiagram\",\n      \"journey\",\n      \"gantt\",\n      \"pie\",\n      \"gitgraph\",\n      \"mindmap\",\n      \"timeline\",\n      \"sankey\",\n    ];\n\n    const trimmedText = text.trim().toLowerCase();\n    return mermaidKeywords.some((keyword) => trimmedText.startsWith(keyword));\n  }\n\n  checkForMermaidElements(node) {\n    if (this.isMermaidElement(node)) {\n      console.log(\"🆕 New Mermaid element detected:\", node);\n    }\n\n    // Check child elements\n    if (node.querySelectorAll) {\n      const mermaidElements = node.querySelectorAll(\n        \".mermaid, [ac\\\\:name='mermaid'], svg[id*='mermaid']\"\n      );\n      mermaidElements.forEach((element) => {\n        console.log(\"🆕 New Mermaid child element detected:\", element);\n      });\n    }\n  }\n\n  createPopupUI() {\n    const root = document.createElement(\"div\");\n    root.id = \"mermaid-ai-chat-root\";\n    root.innerHTML = `\n      <div id=\"mermaid-ai-chat-popup\" class=\"mermaid-ai-chat-popup\" style=\"display: none;\">\n        <div class=\"mermaid-ai-chat-header\">\n          <h3>🤖 Chat with AI about this Mermaid diagram</h3>\n          <button class=\"mermaid-ai-chat-close\">&times;</button>\n        </div>\n        <div class=\"mermaid-ai-chat-body\">\n          <div class=\"mermaid-ai-chat-messages\" id=\"mermaid-ai-chat-messages\">\n            <div class=\"mermaid-ai-chat-message system\">\n              <div class=\"message-content\">\n                <p>👋 Hi! I can help you modify this Mermaid diagram. What would you like to change?</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"mermaid-ai-chat-input-container\">\n            <textarea \n              id=\"mermaid-ai-chat-input\" \n              class=\"mermaid-ai-chat-input\" \n              placeholder=\"Describe how you want to modify the diagram...\"\n              rows=\"3\"\n            ></textarea>\n            <button id=\"mermaid-ai-chat-send\" class=\"mermaid-ai-chat-send\">\n              📤 Send\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    document.body.appendChild(root);\n    this.bindPopupEvents();\n  }\n\n  bindPopupEvents() {\n    const popup = document.getElementById(\"mermaid-ai-chat-popup\");\n    const closeBtn = popup.querySelector(\".mermaid-ai-chat-close\");\n    const sendBtn = document.getElementById(\"mermaid-ai-chat-send\");\n    const input = document.getElementById(\"mermaid-ai-chat-input\");\n\n    // Close popup\n    closeBtn.addEventListener(\"click\", () => {\n      this.hideChatPopup();\n    });\n\n    // Send message\n    sendBtn.addEventListener(\"click\", () => {\n      this.sendMessage();\n    });\n\n    // Send on Enter (Ctrl+Enter for new line)\n    input.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Enter\" && !e.ctrlKey && !e.shiftKey) {\n        e.preventDefault();\n        this.sendMessage();\n      }\n    });\n\n    // Close on outside click\n    popup.addEventListener(\"click\", (e) => {\n      if (e.target === popup) {\n        this.hideChatPopup();\n      }\n    });\n  }\n\n  showChatPopup(x, y) {\n    const popup = document.getElementById(\"mermaid-ai-chat-popup\");\n    popup.style.display = \"block\";\n    popup.style.left = Math.min(x, window.innerWidth - 400) + \"px\";\n    popup.style.top = Math.min(y, window.innerHeight - 300) + \"px\";\n\n    this.isPopupOpen = true;\n\n    // Focus input\n    setTimeout(() => {\n      const input = document.getElementById(\"mermaid-ai-chat-input\");\n      input.focus();\n    }, 100);\n  }\n\n  hideChatPopup() {\n    const popup = document.getElementById(\"mermaid-ai-chat-popup\");\n    popup.style.display = \"none\";\n    this.isPopupOpen = false;\n\n    // Clear messages except system message\n    const messagesContainer = document.getElementById(\n      \"mermaid-ai-chat-messages\"\n    );\n    const systemMessage = messagesContainer.querySelector(\".system\");\n    messagesContainer.innerHTML = \"\";\n    messagesContainer.appendChild(systemMessage);\n\n    // Clear input\n    document.getElementById(\"mermaid-ai-chat-input\").value = \"\";\n  }\n\n  async sendMessage() {\n    const input = document.getElementById(\"mermaid-ai-chat-input\");\n    const message = input.value.trim();\n\n    // Validate user prompt\n    const promptValidation = ApiClient.validateUserPrompt(message);\n    if (!promptValidation.isValid) {\n      this.addMessage(\"assistant\", `⚠️ ${promptValidation.error}`);\n      return;\n    }\n\n    // Validate diagram content\n    const diagramValidation = ApiClient.validateDiagramContent(\n      this.currentMermaidContent\n    );\n    if (!diagramValidation.isValid) {\n      this.addMessage(\"assistant\", `⚠️ ${diagramValidation.error}`);\n      return;\n    }\n\n    // Add user message to chat\n    this.addMessage(\"user\", message);\n\n    // Clear input\n    input.value = \"\";\n\n    // Show loading\n    const loadingId = this.addMessage(\"assistant\", \"🤔 Thinking...\");\n\n    try {\n      // Call AI API\n      const response = await this.callAI(message);\n\n      // Remove loading message\n      this.removeMessage(loadingId);\n\n      // Add AI response\n      this.addMessage(\"assistant\", response);\n    } catch (error) {\n      console.error(\"❌ AI API error:\", error);\n\n      // Remove loading message\n      this.removeMessage(loadingId);\n\n      // Get user-friendly error message\n      const errorMessage = ApiClient.getErrorMessage({\n        success: false,\n        error: error.message,\n      });\n      this.addMessage(\"assistant\", errorMessage);\n    }\n  }\n\n  addMessage(type, content) {\n    const messagesContainer = document.getElementById(\n      \"mermaid-ai-chat-messages\"\n    );\n    const messageId = \"msg-\" + Date.now();\n\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.className = `mermaid-ai-chat-message ${type}`;\n    messageDiv.id = messageId;\n    messageDiv.innerHTML = `\n      <div class=\"message-content\">\n        <p>${content}</p>\n      </div>\n    `;\n\n    messagesContainer.appendChild(messageDiv);\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n\n    return messageId;\n  }\n\n  removeMessage(messageId) {\n    const message = document.getElementById(messageId);\n    if (message) {\n      message.remove();\n    }\n  }\n\n  async callAI(userPrompt) {\n    // Prepare payload similar to the original extension\n    const payload = {\n      diagram_content: this.currentMermaidContent,\n      user_prompt: userPrompt,\n      context: \"mermaid_diagram_editing\",\n    };\n\n    console.log(\"📤 Sending AI request:\", payload);\n\n    // Use the API client from shared module\n    const response = await ApiClient.editDiagram(payload);\n\n    if (response.success) {\n      return (\n        response.data.result ||\n        response.data.response ||\n        \"✅ Diagram updated successfully!\"\n      );\n    } else {\n      throw new Error(response.error || \"Unknown error occurred\");\n    }\n  }\n}\n\n// Initialize when DOM is ready\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    window.mermaidAIChat = new MermaidAIChat();\n  });\n} else {\n  window.mermaidAIChat = new MermaidAIChat();\n}\n"],"names":["rootUrl","API_URLS","EDIT_DIAGRAM","EDIT_TEXT","ApiClient","request","url","options","config","method","headers","console","log","response","fetch","status","statusText","ok","Error","data","json","success","error","message","editDiagram","payload","apiPayload","diagram_content","user_prompt","context","diagram_type","this","detectDiagramType","timestamp","Date","toISOString","body","JSON","stringify","content","trimmedContent","trim","toLowerCase","diagramTypes","graph","flowchart","sequencediagram","classdiagram","statediagram","erdiagram","journey","gantt","pie","gitgraph","mindmap","timeline","sankey","keyword","type","Object","entries","startsWith","validateDiagramContent","isValid","length","validateUserPrompt","prompt","trimmedPrompt","getErrorMessage","errorMappings","Timeout","key","includes","MermaidAIChat","constructor","isPopupOpen","currentMermaidContent","currentMermaidElement","init","document","getElementById","setupMermaidDetection","createPopupUI","addEventListener","event","handleClick","MutationObserver","mutations","forEach","mutation","addedNodes","node","nodeType","Node","ELEMENT_NODE","checkForMermaidElements","observe","childList","subtree","clickedElement","target","mermaidElement","findMermaidElement","mermaidContent","extractMermaidContent","showChatPopup","clientX","clientY","element","isMermaidElement","parent","parentElement","tagName","classList","contains","querySelector","getAttribute","id","some","indicator","codeParam","textContent","innerText","dataset","mermaid","scriptTag","codeTag","isMermaidSyntax","svg","title","desc","text","trimmedText","querySelectorAll","root","createElement","innerHTML","appendChild","bindPopupEvents","popup","closeBtn","sendBtn","input","hideChatPopup","sendMessage","e","ctrlKey","shiftKey","preventDefault","x","y","style","display","left","Math","min","window","innerWidth","top","innerHeight","setTimeout","focus","messagesContainer","systemMessage","value","promptValidation","addMessage","diagramValidation","loadingId","callAI","removeMessage","errorMessage","messageId","now","messageDiv","className","scrollTop","scrollHeight","remove","userPrompt","result","readyState","mermaidAIChat"],"sourceRoot":""}